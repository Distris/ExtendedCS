"use strict";(self.webpackChunkcsharp_extended_compiler=self.webpackChunkcsharp_extended_compiler||[]).push([[1223],{3905:(e,n,t)=>{t.d(n,{Zo:()=>u,kt:()=>f});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var l=r.createContext({}),c=function(e){var n=r.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},u=function(e){var n=c(e.components);return r.createElement(l.Provider,{value:n},e.children)},p="mdxType",m={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),p=c(t),d=a,f=p["".concat(l,".").concat(d)]||p[d]||m[d]||i;return t?r.createElement(f,o(o({ref:n},u),{},{components:t})):r.createElement(f,o({ref:n},u))}));function f(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=t.length,o=new Array(i);o[0]=d;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s[p]="string"==typeof e?e:a,o[1]=s;for(var c=2;c<i;c++)o[c]=t[c];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},8117:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>m,frontMatter:()=>i,metadata:()=>s,toc:()=>c});var r=t(7462),a=(t(7294),t(3905));const i={sidebar_position:4},o="Parameters and Functions",s={unversionedId:"macros/attribute-based/parameters-and-functions",id:"macros/attribute-based/parameters-and-functions",title:"Parameters and Functions",description:"Both expression and statement macros share the same parameters and functions that you can use in them.",source:"@site/docs/macros/attribute-based/parameters-and-functions.md",sourceDirName:"macros/attribute-based",slug:"/macros/attribute-based/parameters-and-functions",permalink:"/docs/macros/attribute-based/parameters-and-functions",draft:!1,editUrl:"https://github.com/distris/ExtendedCS/tree/main/docs/macros/attribute-based/parameters-and-functions.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"docsSidebar",previous:{title:"TODO: VarMacro",permalink:"/docs/macros/attribute-based/var-macro"},next:{title:"Use Cases",permalink:"/docs/macros/attribute-based/use-cases"}},l={},c=[{value:"Parameters",id:"parameters",level:2},{value:"argumentName",id:"argumentname",level:3},{value:"uniqueId",id:"uniqueid",level:3},{value:"returnType",id:"returntype",level:3},{value:"genericX",id:"genericx",level:3},{value:"Functions",id:"functions",level:2},{value:"inline",id:"inline",level:3}],u={toc:c},p="wrapper";function m(e){let{components:n,...t}=e;return(0,a.kt)(p,(0,r.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"parameters-and-functions"},"Parameters and Functions"),(0,a.kt)("p",null,"Both ",(0,a.kt)("a",{parentName:"p",href:"/docs/macros/attribute-based/expression-macro"},"expression")," and ",(0,a.kt)("a",{parentName:"p",href:"/docs/macros/attribute-based/statement-macro"},"statement")," macros share the same parameters and functions that you can use in them."),(0,a.kt)("h2",{id:"parameters"},"Parameters"),(0,a.kt)("p",null,"These parameters (accessible via the ",(0,a.kt)("inlineCode",{parentName:"p"},"{{ parameter }}")," syntax) are exported to the scriban template:"),(0,a.kt)("h3",{id:"argumentname"},"argumentName"),(0,a.kt)("p",null,"Refers to function argument named ",(0,a.kt)("inlineCode",{parentName:"p"},"argumentName"),"."),(0,a.kt)("p",null,"For example this type signature has two parameters, accessible as ",(0,a.kt)("inlineCode",{parentName:"p"},"{{ dict }}")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"{{ key }}")," respectively:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cs"},"public static V getOrThrowM<K, V>(this IReadOnlyDictionary<K, V> dict, K key)\n")),(0,a.kt)("h3",{id:"uniqueid"},"uniqueId"),(0,a.kt)("p",null,"An unique identifier for this macro call, can be used as a temporary variable name:"),(0,a.kt)("p",null,"For example:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cs"},'[ExpressionMacro(@"\n{{ dict }}.TryGetValue({{ key }}, out var {{ uniqueId }})\n  ? {{ uniqueId }}\n  : throw new System.Exception(\n    ""Can not find "" + {{ key }} + "" in the dictionary.""\n  )\n")]\npublic static V getOrThrowM<K, V>(this IReadOnlyDictionary<K, V> dict, K key) => \n  throw new MacroException();\n')),(0,a.kt)("h3",{id:"returntype"},"returnType"),(0,a.kt)("p",null,"Resolved return type of the invoked method."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cs"},'[ExpressionMacro(@"({{ a }}, ""The type of this method is {{ returnType }}."")")]\nstatic (A, string) identify<A>(A a) => throw new MacroException();\n\nvar tpl = identify(5);\n')),(0,a.kt)("p",null,"Compiles to:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cs"},'var tpl = (5, "The type of this method is (int, string).");\n')),(0,a.kt)("h3",{id:"genericx"},"genericX"),(0,a.kt)("p",null,"Resolved generic type of a generic argument named ",(0,a.kt)("inlineCode",{parentName:"p"},"X"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cs"},'[ExpressionMacro(@"({{ a }}, ""The type of {{ a }} is {{ genericA }}."")")]\nstatic (A, string) identify<A>(A a) => throw new MacroException();\n\nvar tpl = identify(5);\n')),(0,a.kt)("p",null,"Compiles to:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cs"},'var tpl = (5, "The type of 5 is int.");\n')),(0,a.kt)("h2",{id:"functions"},"Functions"),(0,a.kt)("h3",{id:"inline"},"inline"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"inline(string functionName, string[] args...)")," - inlines an anonymous function from the argument named ",(0,a.kt)("inlineCode",{parentName:"p"},"functionName"),"."),(0,a.kt)("p",null,"Example:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cs"},'[ExpressionMacro(@"\n  (({{opt}}).valueOut(out var {{uniqueId}}) \n    ? ({{inline \'ifSome\' uniqueId}}) \n    : ({{inline \'ifNone\'}}))"\n)]\npublic static void foldM<A, R>(\n  this Option<A> opt, Func<R> ifNone, Func<A, R> ifSome\n) => throw new MacroException();\n\npublic class Example {\n  public int test(Option<int> opt) => opt.foldM(\n    ifNone: () => {\n      Console.WriteLine("Warning, no value!");\n      Console.Beep();\n      return -1;\n    },\n    ifSome: value => {\n      Console.WriteLine("Received a value!");\n      Console.WriteLine(value);\n      return value;\n    }\n  );\n}\n')),(0,a.kt)("p",null,"Compiles to:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cs"},'public class Example {\n  public int test(Option<int> opt) {\n    return ((opt).valueOut(out var id_373_660) \n      ? (_LOCAL_ifSome_527_653(id_373_660)) \n      : (_LOCAL_ifNone_399_510()));\n\n    int _LOCAL_ifNone_399_510() {\n      Console.WriteLine("Warning, no value!");\n      Console.Beep();\n      return -1;\n    }\n\n    int _LOCAL_ifSome_527_653(int value) {\n      Console.WriteLine("Received a value!");\n      Console.WriteLine(value);\n      return value;\n    }\n  }\n}\n')))}m.isMDXComponent=!0}}]);