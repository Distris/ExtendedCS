"use strict";(self.webpackChunkcsharp_extended_compiler=self.webpackChunkcsharp_extended_compiler||[]).push([[8262],{3905:(e,t,a)=>{a.d(t,{Zo:()=>l,kt:()=>b});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function s(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var c=n.createContext({}),p=function(e){var t=n.useContext(c),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},l=function(e){var t=p(e.components);return n.createElement(c.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,i=e.originalType,c=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),u=p(a),m=r,b=u["".concat(c,".").concat(m)]||u[m]||d[m]||i;return a?n.createElement(b,o(o({ref:t},l),{},{components:a})):n.createElement(b,o({ref:t},l))}));function b(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=a.length,o=new Array(i);o[0]=m;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s[u]="string"==typeof e?e:r,o[1]=s;for(var p=2;p<i;p++)o[p]=a[p];return n.createElement.apply(null,o)}return n.createElement.apply(null,a)}m.displayName="MDXCreateElement"},2524:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>d,frontMatter:()=>i,metadata:()=>s,toc:()=>p});var n=a(7462),r=(a(7294),a(3905));const i={sidebar_position:2},o="ExpressionMacro",s={unversionedId:"capabilities/macros/attribute-based/expression-macro",id:"capabilities/macros/attribute-based/expression-macro",title:"ExpressionMacro",description:"[ExpressionMacro] is an attribute that allows you to replace the invocation of a function with a specified body that returns an expression.",source:"@site/docs/capabilities/macros/attribute-based/expression-macro.md",sourceDirName:"capabilities/macros/attribute-based",slug:"/capabilities/macros/attribute-based/expression-macro",permalink:"/ExtendedCS/docs/capabilities/macros/attribute-based/expression-macro",draft:!1,editUrl:"https://github.com/distris/ExtendedCS/tree/main/docs/capabilities/macros/attribute-based/expression-macro.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"docsSidebar",previous:{title:"MacroException",permalink:"/ExtendedCS/docs/capabilities/macros/attribute-based/macro-exception"},next:{title:"StatementMacro",permalink:"/ExtendedCS/docs/capabilities/macros/attribute-based/statement-macro"}},c={},p=[{value:"Syntax",id:"syntax",level:2}],l={toc:p},u="wrapper";function d(e){let{components:t,...a}=e;return(0,r.kt)(u,(0,n.Z)({},l,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"expressionmacro"},"ExpressionMacro"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"[ExpressionMacro]")," is an attribute that allows you to replace the invocation of a function with a specified body that returns an expression."),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"An expression is any section of the code that evaluates to a value (that you can assign to a variable), such as ",(0,r.kt)("inlineCode",{parentName:"p"},"3"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"a + b + c"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"computeValue()")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"condition ? ifTrue() : ifFalse()"),".")),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"This only supports bodies that are expressions. If you need to have statement bodies, use ",(0,r.kt)("a",{parentName:"p",href:"/ExtendedCS/docs/capabilities/macros/attribute-based/statement-macro"},(0,r.kt)("inlineCode",{parentName:"a"},"[StatementMacro]"))," instead.")),(0,r.kt)("p",null,"For example, if we define such macro function:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cs"},'using GenerationAttributes;\n\npublic static class AnyExts {\n  /// <summary>Returns "expression=evaluated expression" string.</summary>\n  [ExpressionMacro(@"(""{{a}}="" + ({{a}}))")]\n  public static string echo<A>(this A a) => throw new MacroException();\n}\n')),(0,r.kt)("p",null,"Then this code:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cs"},'var error = $"No such {index.echo()}. {list.Count.echo()}";\n')),(0,r.kt)("p",null,"Will be compiled to:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cs"},'var error = $"No such {("index=" + (index))}. {("list.Count=" + list.Count)}";\n')),(0,r.kt)("p",null,"Which is equivalent to:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cs"},'var error = $"No such index={index}. list.Count={list.Count}";\n')),(0,r.kt)("h2",{id:"syntax"},"Syntax"),(0,r.kt)("p",null,"The pattern for ",(0,r.kt)("inlineCode",{parentName:"p"},"ExpressionMacro")," is evaluated with ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/scriban/scriban"},"scriban")," templating language."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cs"},'[ExpressionMacro("scriban goes here")]\n')),(0,r.kt)("p",null,"See ",(0,r.kt)("a",{parentName:"p",href:"/ExtendedCS/docs/capabilities/macros/attribute-based/parameters-and-functions"},"parameters and functions")," for additional information."))}d.isMDXComponent=!0}}]);