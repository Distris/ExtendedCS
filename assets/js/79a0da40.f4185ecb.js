"use strict";(self.webpackChunkcsharp_extended_compiler=self.webpackChunkcsharp_extended_compiler||[]).push([[4797],{3905:(e,t,i)=>{i.d(t,{Zo:()=>s,kt:()=>h});var n=i(7294);function a(e,t,i){return t in e?Object.defineProperty(e,t,{value:i,enumerable:!0,configurable:!0,writable:!0}):e[t]=i,e}function r(e,t){var i=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),i.push.apply(i,n)}return i}function l(e){for(var t=1;t<arguments.length;t++){var i=null!=arguments[t]?arguments[t]:{};t%2?r(Object(i),!0).forEach((function(t){a(e,t,i[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(i)):r(Object(i)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(i,t))}))}return e}function p(e,t){if(null==e)return{};var i,n,a=function(e,t){if(null==e)return{};var i,n,a={},r=Object.keys(e);for(n=0;n<r.length;n++)i=r[n],t.indexOf(i)>=0||(a[i]=e[i]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)i=r[n],t.indexOf(i)>=0||Object.prototype.propertyIsEnumerable.call(e,i)&&(a[i]=e[i])}return a}var o=n.createContext({}),c=function(e){var t=n.useContext(o),i=t;return e&&(i="function"==typeof e?e(t):l(l({},t),e)),i},s=function(e){var t=c(e.components);return n.createElement(o.Provider,{value:t},e.children)},m="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var i=e.components,a=e.mdxType,r=e.originalType,o=e.parentName,s=p(e,["components","mdxType","originalType","parentName"]),m=c(i),d=a,h=m["".concat(o,".").concat(d)]||m[d]||u[d]||r;return i?n.createElement(h,l(l({ref:t},s),{},{components:i})):n.createElement(h,l({ref:t},s))}));function h(e,t){var i=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=i.length,l=new Array(r);l[0]=d;var p={};for(var o in t)hasOwnProperty.call(t,o)&&(p[o]=t[o]);p.originalType=e,p[m]="string"==typeof e?e:a,l[1]=p;for(var c=2;c<r;c++)l[c]=i[c];return n.createElement.apply(null,l)}return n.createElement.apply(null,i)}d.displayName="MDXCreateElement"},5481:(e,t,i)=>{i.r(t),i.d(t,{assets:()=>o,contentTitle:()=>l,default:()=>u,frontMatter:()=>r,metadata:()=>p,toc:()=>c});var n=i(7462),a=(i(7294),i(3905));const r={sidebar_position:0},l="Implicit Parameter Resolution",p={unversionedId:"capabilities/implicits/index",id:"capabilities/implicits/index",title:"Implicit Parameter Resolution",description:"Implicit parameter resolution is a feature that we have ported from the Scala language. They are a way to resolve function parameter values without providing them explicitly.",source:"@site/docs/capabilities/implicits/index.md",sourceDirName:"capabilities/implicits",slug:"/capabilities/implicits/",permalink:"/docs/capabilities/implicits/",draft:!1,editUrl:"https://github.com/distris/ExtendedCS/tree/main/docs/capabilities/implicits/index.md",tags:[],version:"current",sidebarPosition:0,frontMatter:{sidebar_position:0},sidebar:"docsSidebar",previous:{title:"Exhaustive Matching",permalink:"/docs/capabilities/exhaustive-matching"},next:{title:"Use Case: Dependency Injection",permalink:"/docs/capabilities/implicits/dependency-injection"}},o={},c=[{value:"Implicit",id:"implicit",level:2},{value:"Implicit Resolution Process",id:"implicit-resolution-process",level:3},{value:"Implicit Hinting",id:"implicit-hinting",level:3},{value:"ImplicitPassThrough",id:"implicitpassthrough",level:2}],s={toc:c},m="wrapper";function u(e){let{components:t,...r}=e;return(0,a.kt)(m,(0,n.Z)({},s,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"implicit-parameter-resolution"},"Implicit Parameter Resolution"),(0,a.kt)("p",null,"Implicit parameter resolution is a feature that we have ported from the ",(0,a.kt)("a",{parentName:"p",href:"https://scala-lang.org"},"Scala language"),". They are a way to resolve function parameter values without providing them explicitly."),(0,a.kt)("p",null,"We currently have two ways to use implicits: ",(0,a.kt)("inlineCode",{parentName:"p"},"[Implicit]")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"[ImplicitPassThrough]"),"."),(0,a.kt)("h2",{id:"implicit"},"Implicit"),(0,a.kt)("p",null,"You can mark parameters to functions as implicits:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cs"},"using GenerationAttributes;\n\npublic static A Sum<A>(\n  this IEnumerable<A> elements, [Implicit] Numeric<A> numeric = default\n) =>\n  elements.Aggregate(numeric.Zero, (a, b) => numeric.Add(a, b));\n")),(0,a.kt)("p",null,"When you invoke this function, you can either:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"Provide the argument explicitly, then it will behave as a regular function."),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-cs"},"var sum = new []{1, 2, 3}.Sum(Numeric.Integer);\n"))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"Or omit the parameter, in which case the compiler will perform an implicit search to provide a value for the parameter at a compile time."),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-cs"},"var sum = new []{1, 2, 3}.Sum();\n")))),(0,a.kt)("h3",{id:"implicit-resolution-process"},"Implicit Resolution Process"),(0,a.kt)("p",null,"The compiler tries to find a value for the implicit parameter using these rules:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"It has to find ",(0,a.kt)("strong",{parentName:"p"},"exactly one")," value of the required type. Finding zero or more than one values is a compile time error.")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"The compiler first looks for any parameters marked as ",(0,a.kt)("inlineCode",{parentName:"p"},"[Implicit]")," in the local function."),(0,a.kt)("p",{parentName:"li"},"For example:"),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-cs"},"public int SumIntegers(int[] integers, [Implicit] Numeric<int> numeric = default) =>\n  integers.Sum();\n")),(0,a.kt)("p",{parentName:"li"},"Will compile to:"),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-cs"},"public int SumIntegers(int[] integers, [Implicit] Numeric<int> numeric = default) =>\n  integers.Sum(numeric);\n"))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"If the compiler can not find a suitable value in the local scope, it tries the class / struct scope."),(0,a.kt)("p",{parentName:"li"},"For example:"),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-cs"},"class NumberCruncher {\n  // This can also be static.\n  readonly [Implicit] Numeric<int> IntNumeric = /* ... */;\n\n  public int SumIntegers(int[] integers) => integers.Sum();\n}\n")),(0,a.kt)("p",{parentName:"li"},"Will compile to:"),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-cs"},"class NumberCruncher {\n  readonly [Implicit] Numeric<int> IntNumeric = /* ... */;\n\n  public int SumIntegers(int[] integers) => integers.Sum(IntNumeric);\n}\n"))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"If class / struct scope fails as well, it tries to find a ",(0,a.kt)("inlineCode",{parentName:"p"},"public static")," field, property or method to provide the value."),(0,a.kt)("p",{parentName:"li"},"For example:"),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-cs"},"public static class Numerics {\n  [Implicit] public static readonly Numeric<int> IntNumeric = /* ... */;\n}\n\nclass NumberCruncher {\n  public int SumIntegers(int[] integers) => integers.Sum();\n}\n")),(0,a.kt)("p",{parentName:"li"},"Will compile to:"),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-cs"},"public static class Numerics {\n  [Implicit] public static readonly Numeric<int> IntNumeric = /* ... */;\n}\n\nclass NumberCruncher {\n  public int SumIntegers(int[] integers) => integers.Sum(Numerics.IntNumeric);\n}\n"))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"If it can not find a value, a compilation error is emitted:"),(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"Example.cs(24, 16): [Implicits02] No matching implicits found for parameter 'numeric' of type 'Numeric<int>' on operation 'SumIntegers'")))),(0,a.kt)("admonition",{type:"note"},(0,a.kt)("p",{parentName:"admonition"},"The resolution always follows the ",(0,a.kt)("inlineCode",{parentName:"p"},"function"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"class / struct"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"global")," order."),(0,a.kt)("p",{parentName:"admonition"},"The idea behind it is that the more local the scope is, the more relevant the implicit value is to your computation.")),(0,a.kt)("admonition",{type:"info"},(0,a.kt)("p",{parentName:"admonition"},"Implicits have to rewrite your code, thus you will end up with a ",(0,a.kt)("inlineCode",{parentName:"p"},".transformed.cs")," file."),(0,a.kt)("p",{parentName:"admonition"},"See ",(0,a.kt)("a",{parentName:"p",href:"/docs/generation-and-transformation/"},"code transformation")," for more information.")),(0,a.kt)("h3",{id:"implicit-hinting"},"Implicit Hinting"),(0,a.kt)("p",null,"If you are using an IDE that supports compiler hints, the IDE will show you a hint with the information of how the implicit was resolved without the need of recompile."),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"Resolved implicit",src:i(1857).Z,width:"940",height:"343"})),(0,a.kt)("h2",{id:"implicitpassthrough"},"ImplicitPassThrough"),(0,a.kt)("p",null,"If your function itself does not use the implicit, but you just have to pass it to other invoked functions, instead of specifying the implicits manually, you can use the ",(0,a.kt)("inlineCode",{parentName:"p"},"[ImplitictPassThrough]")," attribute."),(0,a.kt)("p",null,"For example, this code:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cs"},"void Run2([Implicit] Numeric<int> numeric = default) {\n  /* ... */\n}\n\n[ImplicitPassThrough]\nvoid Run1() {\n  Run2();\n}\n")),(0,a.kt)("p",null,"Will get transformed to:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cs"},"void Run2([Implicit] Numeric<int> numeric = default) {\n}\n\n[ImplicitPassThrough]\nvoid Run1([GenerationAttributes.Implicit] Numeric<int> _implicit_Numeric_Int32 = default) {\n  Run2(numeric: _implicit_Numeric_Int32);\n}\n")))}u.isMDXComponent=!0},1857:(e,t,i)=>{i.d(t,{Z:()=>n});const n=i.p+"assets/images/resolved-implicit-ad80bfac04970cbbc79c40ec06b5f1d3.png"}}]);