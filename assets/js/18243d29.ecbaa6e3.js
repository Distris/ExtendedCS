"use strict";(self.webpackChunkcsharp_extended_compiler=self.webpackChunkcsharp_extended_compiler||[]).push([[6217],{3905:(e,t,a)=>{a.d(t,{Zo:()=>p,kt:()=>m});var n=a(7294);function i(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function r(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function s(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?r(Object(a),!0).forEach((function(t){i(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,n,i=function(e,t){if(null==e)return{};var a,n,i={},r=Object.keys(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||(i[a]=e[a]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(i[a]=e[a])}return i}var l=n.createContext({}),c=function(e){var t=n.useContext(l),a=t;return e&&(a="function"==typeof e?e(t):s(s({},t),e)),a},p=function(e){var t=c(e.components);return n.createElement(l.Provider,{value:t},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},h=n.forwardRef((function(e,t){var a=e.components,i=e.mdxType,r=e.originalType,l=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),d=c(a),h=i,m=d["".concat(l,".").concat(h)]||d[h]||u[h]||r;return a?n.createElement(m,s(s({ref:t},p),{},{components:a})):n.createElement(m,s({ref:t},p))}));function m(e,t){var a=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=a.length,s=new Array(r);s[0]=h;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o[d]="string"==typeof e?e:i,s[1]=o;for(var c=2;c<r;c++)s[c]=a[c];return n.createElement.apply(null,s)}return n.createElement.apply(null,a)}h.displayName="MDXCreateElement"},38:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>u,frontMatter:()=>r,metadata:()=>o,toc:()=>c});var n=a(7462),i=(a(7294),a(3905));const r={sidebar_position:4},s="Exhaustive Matching",o={unversionedId:"capabilities/exhaustive-matching",id:"capabilities/exhaustive-matching",title:"Exhaustive Matching",description:"In modern languages like Scala, Rust, Kotlin or F#, it is trivial to declare discriminated unions, also known as algebraic data types (ADTs).",source:"@site/docs/capabilities/exhaustive-matching.md",sourceDirName:"capabilities",slug:"/capabilities/exhaustive-matching",permalink:"/ExtendedCS/docs/capabilities/exhaustive-matching",draft:!1,editUrl:"https://github.com/distris/ExtendedCS/tree/main/docs/capabilities/exhaustive-matching.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"docsSidebar",previous:{title:"LazyProperty",permalink:"/ExtendedCS/docs/capabilities/lazy-property"},next:{title:"Implicit Parameter Resolution",permalink:"/ExtendedCS/docs/capabilities/implicits/"}},l={},c=[{value:"Exhaustive Matching",id:"exhaustive-matching-1",level:2},{value:"<code>[Matcher]</code>",id:"matcher",level:3},{value:"<code>[MatcherFor]</code>",id:"matcherfor",level:3}],p={toc:c},d="wrapper";function u(e){let{components:t,...a}=e;return(0,i.kt)(d,(0,n.Z)({},p,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"exhaustive-matching"},"Exhaustive Matching"),(0,i.kt)("p",null,"In modern languages like ",(0,i.kt)("a",{parentName:"p",href:"https://docs.scala-lang.org/scala3/reference/enums/adts.html"},"Scala"),", ",(0,i.kt)("a",{parentName:"p",href:"https://doc.rust-lang.org/book/ch06-01-defining-an-enum.html"},"Rust"),", ",(0,i.kt)("a",{parentName:"p",href:"https://kotlinlang.org/docs/sealed-classes.html"},"Kotlin")," or ",(0,i.kt)("a",{parentName:"p",href:"https://learn.microsoft.com/en-us/dotnet/fsharp/language-reference/discriminated-unions"},"F#"),", it is trivial to declare discriminated unions, also known as ",(0,i.kt)("a",{parentName:"p",href:"https://jrsinclair.com/articles/2019/algebraic-data-types-what-i-wish-someone-had-explained-about-functional-programming/"},"algebraic data types (ADTs)"),"."),(0,i.kt)("admonition",{type:"info"},(0,i.kt)("p",{parentName:"admonition"},"If you are not familiar with ADTs ","\u2014",' they are a way to express in your code that "this data can only take one of fixed number of forms".'),(0,i.kt)("p",{parentName:"admonition"},"For example, an item in a video game could be represented as one of:"),(0,i.kt)("ul",{parentName:"admonition"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Melee weapon")," with these properties: damage, time between attacks."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Ranged weapon")," with these properties: damage, maximum range, time between attacks."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Healing kit")," with these properties: hit points healed, time to heal, charges left.")),(0,i.kt)("p",{parentName:"admonition"},"The idea is to have different code paths dealing with each case of the ",(0,i.kt)("inlineCode",{parentName:"p"},"Item")," ADT. In our case, the melee weapon, ranged weapon or healing kit items require different code to handle them, as the items are very different.")),(0,i.kt)("p",null,"C# does not have ADTs built in, however you can represent them using existing C# constructs: enumerations, ",(0,i.kt)("inlineCode",{parentName:"p"},"abtract class + classes")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"interface + classes"),"."),(0,i.kt)("p",null,"Lets take a look at each implementation:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cs",metastring:'title="ADT using enum"',title:'"ADT',using:!0,'enum"':!0},"enum MyADT { Case1, Case2, Case3 }\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cs",metastring:'title="ADT using abstract classes"',title:'"ADT',using:!0,abstract:!0,'classes"':!0},"abstract class MyADT {\n  [Record] public sealed partial class Case1 : MyADT {\n    public readonly string Data;\n  }\n\n  [Record] public sealed partial class Case2 : MyADT {\n    public readonly int Data;\n  }\n\n  [Singleton] public sealed partial class Case3 : MyADT {}\n}\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cs",metastring:'title="ADT using interfaces"',title:'"ADT',using:!0,'interfaces"':!0},"interface IMyADT {}\nstatic class MyADT {\n  [Record] public sealed partial class Case1 : IMyADT {\n    public readonly string Data;\n  }\n\n  [Record] public sealed partial class Case2 : IMyADT {\n    public readonly int Data;\n  }\n\n  [Singleton] public sealed partial class Case3 : IMyADT {}\n}\n")),(0,i.kt)("p",null,"When should each representation be used?"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"If your ADT does not contain any data, the simplest option is to use an ",(0,i.kt)("inlineCode",{parentName:"p"},"enum"),"."),(0,i.kt)("admonition",{parentName:"li",type:"tip"},(0,i.kt)("p",{parentName:"admonition"},"If you think that it is likely that cases holding data will appear later down the line, you should use the\n",(0,i.kt)("inlineCode",{parentName:"p"},"abstract class")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"interface")," representation where all cases without data are ",(0,i.kt)("inlineCode",{parentName:"p"},"[Singleton]"),"s."),(0,i.kt)("p",{parentName:"admonition"},"This will save you from refactoring the ",(0,i.kt)("inlineCode",{parentName:"p"},"enum")," based code to ",(0,i.kt)("inlineCode",{parentName:"p"},"abstract class")," / ",(0,i.kt)("inlineCode",{parentName:"p"},"interface")," based code in the future."))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"If it does contain data then either ",(0,i.kt)("inlineCode",{parentName:"p"},"abstract class")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"interface")," representation should be used."),(0,i.kt)("admonition",{parentName:"li",type:"tip"},(0,i.kt)("p",{parentName:"admonition"},"Due to the way C# handles ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/vkhorikov/CSharpFunctionalExtensions/issues/354"},"implicit conversions with interface types"),", we recommend using the ",(0,i.kt)("inlineCode",{parentName:"p"},"abstract class")," approach."),(0,i.kt)("p",{parentName:"admonition"},"All examples from this point forward will be using the ",(0,i.kt)("inlineCode",{parentName:"p"},"abstract class")," approach, although ",(0,i.kt)("inlineCode",{parentName:"p"},"interface")," approach is uses same code.")))),(0,i.kt)("h2",{id:"exhaustive-matching-1"},"Exhaustive Matching"),(0,i.kt)("p",null,"Exhaustive matching is an idea that all variants of your ADT are declared in your source code and therefore, when you receive a ",(0,i.kt)("inlineCode",{parentName:"p"},"MyADT")," as a function parameter, it can only be in one of N forms (in our case ",(0,i.kt)("inlineCode",{parentName:"p"},"N")," is ",(0,i.kt)("inlineCode",{parentName:"p"},"3"),": ",(0,i.kt)("inlineCode",{parentName:"p"},"Case1"),",  ",(0,i.kt)("inlineCode",{parentName:"p"},"Case2")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"Case3"),")."),(0,i.kt)("p",null,"Lets take a look how it looks in practice:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cs",metastring:'title="Using an enum-based ADT"',title:'"Using',an:!0,"enum-based":!0,'ADT"':!0},'int UseMyEnumADT(MyADT adt) =>\n  adt switch {\n    MyADT.Case1 => 1,\n    MyADT.Case2 => 2,\n    MyADT.Case3 => 3,\n    var other => throw new Exception($"Unknown value: {other}")\n  };\n')),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cs",metastring:'title="Using a class-based ADT"',title:'"Using',a:!0,"class-based":!0,'ADT"':!0},'int UseMyClassADT(MyADT adt) =>\n  adt switch {\n    MyADT.Case1 c => c.Data.Length,\n    MyADT.Case2 c => c.Data,\n    MyADT.Case3 _ => 3,\n    _ => throw new Exception($"Unknown value: {adt}")\n  };\n')),(0,i.kt)("p",null,"What happens when we decide to add ",(0,i.kt)("inlineCode",{parentName:"p"},"Case4")," to our ADT later down the line? Well, in standard C# - not much. The compiler will not help you and instead you will start getting runtime exceptions from the functions when they will receive the ",(0,i.kt)("inlineCode",{parentName:"p"},"Case4"),"."),(0,i.kt)("p",null,"Ideally, after adding ",(0,i.kt)("inlineCode",{parentName:"p"},"Case4"),", we would want the compiler to point us to all the places in the code where ADT cases are being checked and raise a compile-time error where this checking is non-exhaustive (not checking all of the possible cases)."),(0,i.kt)("p",null,"To achieve that, there are two solutions:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("a",{parentName:"p",href:"https://github.com/WalkerCodeRanger/ExhaustiveMatching"},(0,i.kt)("inlineCode",{parentName:"a"},"ExhaustiveMatching")," Roslyn analyzer plugin from ",(0,i.kt)("inlineCode",{parentName:"a"},"WalkerCodeRanger")),"."),(0,i.kt)("p",{parentName:"li"},"This relies on existing C# ",(0,i.kt)("inlineCode",{parentName:"p"},"switch")," syntax to perform exhaustive checking and you still need to write the ",(0,i.kt)("inlineCode",{parentName:"p"},"default")," case that does ",(0,i.kt)("inlineCode",{parentName:"p"},"throw ExhaustiveMatch.Failed(value)"),".")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Use the ",(0,i.kt)("inlineCode",{parentName:"p"},"[Matcher]")," attribute from our compiler, which generates code using inlined anonymous functions."))),(0,i.kt)("h3",{id:"matcher"},(0,i.kt)("inlineCode",{parentName:"h3"},"[Matcher]")),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"[Matcher]")," allows you to annotate an ",(0,i.kt)("inlineCode",{parentName:"p"},"enum"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"abstract class")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"interface")," to generate code for exhaustive pattern matching."),(0,i.kt)("p",null,"It generates two extension methods for the specified ADT:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("inlineCode",{parentName:"li"},"match")," - a function when you want to return a value based on the ADT case."),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("inlineCode",{parentName:"li"},"voidMatch")," - a function when you do not want to return any value (the return type is ",(0,i.kt)("inlineCode",{parentName:"li"},"void"),") and just want to run some code based on the ADT case.")),(0,i.kt)("p",null,"For example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cs",metastring:'title="Using an enum-based ADT"',title:'"Using',an:!0,"enum-based":!0,'ADT"':!0},'[Matcher] enum MyADT { Case1, Case2, Case3 }\n\nint UseMyEnumADT(MyADT adt) {\n  // Just run some code based on the case.\n  adt.voidMatch(\n    case1: () => { Console.WriteLine("Case1, yeah!"); },\n    case2: () => { Console.WriteLine("Got Case 2."); },\n    case3: () => { Console.WriteLine("Case 3 in the house!"); }\n  );\n\n  // Return a value based on the case.\n  return adt.match(\n    case1: () => 1,\n    case2: () => 2,\n    case3: () => 3\n  );\n}\n')),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cs",metastring:'title="Using a class-based ADT"',title:'"Using',a:!0,"class-based":!0,'ADT"':!0},'[Matcher] enum MyADT { Case1, Case2, Case3 }\n\nint UseMyEnumADT(MyADT adt) {\n  // Just run some code based on the case.\n  adt.voidMatch(\n    case1: () => { Console.WriteLine("Case1, yeah!"); },\n    case2: () => { Console.WriteLine("Got Case 2."); },\n    case3: () => { Console.WriteLine("Case 3 in the house!"); }\n  );\n\n  // Return a value based on the case.\n  return adt.match(\n    case1: () => 1,\n    case2: () => 2,\n    case3: () => 3\n  );\n}\n')),(0,i.kt)("p",null,"Both ",(0,i.kt)("inlineCode",{parentName:"p"},"match")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"voidMatch")," are ",(0,i.kt)("a",{parentName:"p",href:"/ExtendedCS/docs/macros/inlining"},"inlined"),", thus when you use them the code gets transformed to this:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cs"},'int UseMyEnumADT(MyADT adt) {\n  // Just run some code based on the case.\n  if (adt == MyADT.Case1) {\n    Console.WriteLine("Case1, yeah!");\n  }\n  else if (adt == MyADT.Case2) {\n    Console.WriteLine("Got Case 2.");\n  }\n  else if (adt == MyADT.Case3) {\n    Console.WriteLine("Case 3 in the house!");\n  }\n  else {\n    // This should never be reachable, unless you do something like:\n    // `UseMyEnumADT((MyADT) 10000)`, which defeats the whole purpose of \n    // exhaustive matching.\n    throw new System.ArgumentOutOfRangeException(\n      "adt", adt, "Unknown value"\n    );\n  }\n\n  // Return a value based on the case.\n  if (adt == MyADT.Case1) {\n    return 1;\n  }\n  else if (adt == MyADT.Case2) {\n    return 2;\n  }\n  else if (adt == MyADT.Case3) {\n    return 3;\n  }\n  else {\n    throw new System.ArgumentOutOfRangeException(\n      "adt", adt, "Unknown value"\n    );\n  }\n}\n')),(0,i.kt)("p",null,"What happens when you add ",(0,i.kt)("inlineCode",{parentName:"p"},"Case4")," to the ADT while using ",(0,i.kt)("inlineCode",{parentName:"p"},"[Matcher]"),"? In that case the compiler will regenerate the ",(0,i.kt)("inlineCode",{parentName:"p"},"match")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"voidMatch")," functions, adding the ",(0,i.kt)("inlineCode",{parentName:"p"},"case4")," parameter to each of them and you will be forced to add handling for those cases in the appropriate call-sites."),(0,i.kt)("p",null,"Therefore, using ",(0,i.kt)("inlineCode",{parentName:"p"},"[Matcher]")," allows us to succinctly write code that checks all cases of our ADT and not worry about breaking the code when refactoring in the future."),(0,i.kt)("h3",{id:"matcherfor"},(0,i.kt)("inlineCode",{parentName:"h3"},"[MatcherFor]")),(0,i.kt)("p",null,"This is similar to ",(0,i.kt)("inlineCode",{parentName:"p"},"[Matcher]"),", however it is for generating the ",(0,i.kt)("inlineCode",{parentName:"p"},"match")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"voidMatch")," functions for enums and class hierarchies you do not control."),(0,i.kt)("p",null,"The usage is simple:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cs"},"[MatcherFor(typeof(MyADT))]\npublic static partial class MyADTExtensions {}\n")),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"match")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"voidMatch")," functions will be added into the ",(0,i.kt)("inlineCode",{parentName:"p"},"MyADTExtensions")," class."))}u.isMDXComponent=!0}}]);