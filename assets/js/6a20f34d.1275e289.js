"use strict";(self.webpackChunkcsharp_extended_compiler=self.webpackChunkcsharp_extended_compiler||[]).push([[1223],{3905:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>v});var a=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var s=a.createContext({}),p=function(e){var n=a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},c=function(e){var n=p(e.components);return a.createElement(s.Provider,{value:n},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},d=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),u=p(t),d=r,v=u["".concat(s,".").concat(d)]||u[d]||m[d]||i;return t?a.createElement(v,o(o({ref:n},c),{},{components:t})):a.createElement(v,o({ref:n},c))}));function v(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var i=t.length,o=new Array(i);o[0]=d;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l[u]="string"==typeof e?e:r,o[1]=l;for(var p=2;p<i;p++)o[p]=t[p];return a.createElement.apply(null,o)}return a.createElement.apply(null,t)}d.displayName="MDXCreateElement"},8117:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>o,default:()=>m,frontMatter:()=>i,metadata:()=>l,toc:()=>p});var a=t(7462),r=(t(7294),t(3905));const i={sidebar_position:4},o="Parameters and Functions",l={unversionedId:"macros/attribute-based/parameters-and-functions",id:"macros/attribute-based/parameters-and-functions",title:"Parameters and Functions",description:"Expression, statement and var macros share some of the parameters and functions that you can use in them.",source:"@site/docs/macros/attribute-based/parameters-and-functions.md",sourceDirName:"macros/attribute-based",slug:"/macros/attribute-based/parameters-and-functions",permalink:"/docs/macros/attribute-based/parameters-and-functions",draft:!1,editUrl:"https://github.com/distris/ExtendedCS/tree/main/docs/macros/attribute-based/parameters-and-functions.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"docsSidebar",previous:{title:"VarMacro",permalink:"/docs/macros/attribute-based/var-macro"},next:{title:"CompilationErrorMacro",permalink:"/docs/macros/attribute-based/compilation-error-macro"}},s={},p=[{value:"Parameters",id:"parameters",level:2},{value:"self",id:"self",level:3},{value:"Example",id:"example",level:4},{value:"argumentName",id:"argumentname",level:3},{value:"genericX",id:"genericx",level:3},{value:"Example",id:"example-1",level:4},{value:"uniqueId",id:"uniqueid",level:3},{value:"Example",id:"example-2",level:4},{value:"returnType",id:"returntype",level:3},{value:"Example",id:"example-3",level:4},{value:"varType",id:"vartype",level:3},{value:"Example",id:"example-4",level:4},{value:"varName",id:"varname",level:3},{value:"Example",id:"example-5",level:4},{value:"Functions",id:"functions",level:2},{value:"inline",id:"inline",level:3},{value:"Example",id:"example-6",level:4}],c={toc:p},u="wrapper";function m(e){let{components:n,...t}=e;return(0,r.kt)(u,(0,a.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"parameters-and-functions"},"Parameters and Functions"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/macros/attribute-based/expression-macro"},"Expression"),", ",(0,r.kt)("a",{parentName:"p",href:"/docs/macros/attribute-based/statement-macro"},"statement")," and ",(0,r.kt)("a",{parentName:"p",href:"/docs/macros/attribute-based/var-macro"},"var")," macros share some of the parameters and functions that you can use in them."),(0,r.kt)("h2",{id:"parameters"},"Parameters"),(0,r.kt)("p",null,"These parameters (accessible via the ",(0,r.kt)("inlineCode",{parentName:"p"},"{{ parameter }}")," syntax) are exported to the scriban template:"),(0,r.kt)("h3",{id:"self"},"self"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"{{ self }}")," refers to the code that allows you to access the object."),(0,r.kt)("p",null,"Only defined on instance methods (not static methods)."),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"We can not use ",(0,r.kt)("inlineCode",{parentName:"p"},"{{ this }}")," as it is ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/scriban/scriban/blob/master/doc/language.md#41-the-special-variable-this"},"already used by scriban"),".")),(0,r.kt)("h4",{id:"example"},"Example"),(0,r.kt)("p",null,"Given:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cs"},'struct Inventory {\n  /// <summary> This function only works if <see cref="Inventory"/> is a pointer. </summary>\n  [ExpressionMacro(@"Inventory.inHandsInner(& {{ self }})")]\n  public WeaponStatePtr inHandsPtr() => throw new MacroException();\n}\n')),(0,r.kt)("p",null,"Call to:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cs"},"var weaponState = you->CharacterEF->inventory.inHandsPtr();\n")),(0,r.kt)("p",null,"Will be replaced with:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cs"},"var weaponState = Inventory.inHandsInner(&you->CharacterEF->inventory);\n")),(0,r.kt)("h3",{id:"argumentname"},"argumentName"),(0,r.kt)("p",null,"Refers to function argument named ",(0,r.kt)("inlineCode",{parentName:"p"},"argumentName"),"."),(0,r.kt)("p",null,"For example this type signature has two parameters, accessible as ",(0,r.kt)("inlineCode",{parentName:"p"},"{{ dict }}")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"{{ key }}")," respectively:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cs"},"public static V getOrThrowM<K, V>(this IReadOnlyDictionary<K, V> dict, K key)\n")),(0,r.kt)("h3",{id:"genericx"},"genericX"),(0,r.kt)("p",null,"Resolved generic type of a generic argument named ",(0,r.kt)("inlineCode",{parentName:"p"},"X"),"."),(0,r.kt)("h4",{id:"example-1"},"Example"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cs"},'[ExpressionMacro(@"({{ a }}, ""The type of {{ a }} is {{ genericA }}."")")]\nstatic (A, string) identify<A>(A a) => throw new MacroException();\n\nvar tpl = identify(5);\n')),(0,r.kt)("p",null,"Compiles to:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cs"},'var tpl = (5, "The type of 5 is int.");\n')),(0,r.kt)("h3",{id:"uniqueid"},"uniqueId"),(0,r.kt)("p",null,"An unique identifier for this macro call, can be used as a temporary variable name."),(0,r.kt)("h4",{id:"example-2"},"Example"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cs"},'[ExpressionMacro(@"\n{{ dict }}.TryGetValue({{ key }}, out var {{ uniqueId }})\n  ? {{ uniqueId }}\n  : throw new System.Exception(\n    ""Can not find "" + {{ key }} + "" in the dictionary.""\n  )\n")]\npublic static V getOrThrowM<K, V>(this IReadOnlyDictionary<K, V> dict, K key) => \n  throw new MacroException();\n')),(0,r.kt)("h3",{id:"returntype"},"returnType"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Only available for:")," ",(0,r.kt)("a",{parentName:"p",href:"/docs/macros/attribute-based/expression-macro"},(0,r.kt)("inlineCode",{parentName:"a"},"[ExpressionMacro]"))),(0,r.kt)("p",null,"Resolved return type of the invoked method."),(0,r.kt)("h4",{id:"example-3"},"Example"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cs"},'[ExpressionMacro(@"({{ a }}, ""The type of this method is {{ returnType }}."")")]\nstatic (A, string) identify<A>(A a) => throw new MacroException();\n\nvar tpl = identify(5);\n')),(0,r.kt)("p",null,"Compiles to:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cs"},'var tpl = (5, "The type of this method is (int, string).");\n')),(0,r.kt)("h3",{id:"vartype"},"varType"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Only available for:")," ",(0,r.kt)("a",{parentName:"p",href:"/docs/macros/attribute-based/var-macro"},(0,r.kt)("inlineCode",{parentName:"a"},"[VarMacro]"))),(0,r.kt)("p",null,"The type of ",(0,r.kt)("inlineCode",{parentName:"p"},"var")," we are binding to."),(0,r.kt)("h4",{id:"example-4"},"Example"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cs"},"int MyInt = 5.MyMacroMethod();\n")),(0,r.kt)("p",null,"In this case the ",(0,r.kt)("inlineCode",{parentName:"p"},"{{ varType }}")," will be ",(0,r.kt)("inlineCode",{parentName:"p"},"int"),"."),(0,r.kt)("h3",{id:"varname"},"varName"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Only available for:")," ",(0,r.kt)("a",{parentName:"p",href:"/docs/macros/attribute-based/var-macro"},(0,r.kt)("inlineCode",{parentName:"a"},"[VarMacro]"))),(0,r.kt)("p",null,"The name of ",(0,r.kt)("inlineCode",{parentName:"p"},"var")," we are binding to."),(0,r.kt)("h4",{id:"example-5"},"Example"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cs"},"int MyInt = 5.MyMacroMethod();\n")),(0,r.kt)("p",null,"In this case the ",(0,r.kt)("inlineCode",{parentName:"p"},"{{ varName }}")," will be ",(0,r.kt)("inlineCode",{parentName:"p"},"MyInt"),"."),(0,r.kt)("h2",{id:"functions"},"Functions"),(0,r.kt)("h3",{id:"inline"},"inline"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"inline(string functionName, string[] args...)")," - inlines an anonymous function from the argument named ",(0,r.kt)("inlineCode",{parentName:"p"},"functionName")," so it would not allocate a closure on the heap."),(0,r.kt)("h4",{id:"example-6"},"Example"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cs"},'[ExpressionMacro(@"\n  (({{ opt }}).valueOut(out var {{ uniqueId }}) \n    ? ({{ inline \'ifSome\' uniqueId }}) \n    : ({{ inline \'ifNone\' }}))"\n)]\npublic static void foldM<A, R>(\n  this Option<A> opt, Func<R> ifNone, Func<A, R> ifSome\n) => throw new MacroException();\n\npublic class Example {\n  public int test(Option<int> opt) => opt.foldM(\n    ifNone: () => {\n      Console.WriteLine("Warning, no value!");\n      Console.Beep();\n      return -1;\n    },\n    ifSome: value => {\n      Console.WriteLine("Received a value!");\n      Console.WriteLine(value);\n      return value;\n    }\n  );\n}\n')),(0,r.kt)("p",null,"Compiles to:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cs"},'public class Example {\n  public int test(Option<int> opt) {\n    return ((opt).valueOut(out var id_373_660) \n      ? (_LOCAL_ifSome_527_653(id_373_660)) \n      : (_LOCAL_ifNone_399_510()));\n\n    int _LOCAL_ifNone_399_510() {\n      Console.WriteLine("Warning, no value!");\n      Console.Beep();\n      return -1;\n    }\n\n    int _LOCAL_ifSome_527_653(int value) {\n      Console.WriteLine("Received a value!");\n      Console.WriteLine(value);\n      return value;\n    }\n  }\n}\n')))}m.isMDXComponent=!0}}]);