"use strict";(self.webpackChunkcsharp_extended_compiler=self.webpackChunkcsharp_extended_compiler||[]).push([[8719],{3905:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>f});var i=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);n&&(i=i.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,i)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function c(e,n){if(null==e)return{};var t,i,r=function(e,n){if(null==e)return{};var t,i,r={},a=Object.keys(e);for(i=0;i<a.length;i++)t=a[i],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(i=0;i<a.length;i++)t=a[i],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var s=i.createContext({}),l=function(e){var n=i.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},p=function(e){var n=l(e.components);return i.createElement(s.Provider,{value:n},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return i.createElement(i.Fragment,{},n)}},m=i.forwardRef((function(e,n){var t=e.components,r=e.mdxType,a=e.originalType,s=e.parentName,p=c(e,["components","mdxType","originalType","parentName"]),d=l(t),m=r,f=d["".concat(s,".").concat(m)]||d[m]||u[m]||a;return t?i.createElement(f,o(o({ref:n},p),{},{components:t})):i.createElement(f,o({ref:n},p))}));function f(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var a=t.length,o=new Array(a);o[0]=m;var c={};for(var s in n)hasOwnProperty.call(n,s)&&(c[s]=n[s]);c.originalType=e,c[d]="string"==typeof e?e:r,o[1]=c;for(var l=2;l<a;l++)o[l]=t[l];return i.createElement.apply(null,o)}return i.createElement.apply(null,t)}m.displayName="MDXCreateElement"},5977:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>o,default:()=>u,frontMatter:()=>a,metadata:()=>c,toc:()=>l});var i=t(7462),r=(t(7294),t(3905));const a={sidebar_position:1},o="Use Case: Dependency Injection",c={unversionedId:"capabilities/implicits/dependency-injection",id:"capabilities/implicits/dependency-injection",title:"Use Case: Dependency Injection",description:"Lets say we have this code:",source:"@site/docs/capabilities/implicits/dependency-injection.md",sourceDirName:"capabilities/implicits",slug:"/capabilities/implicits/dependency-injection",permalink:"/docs/capabilities/implicits/dependency-injection",draft:!1,editUrl:"https://github.com/distris/ExtendedCS/tree/main/docs/capabilities/implicits/dependency-injection.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"docsSidebar",previous:{title:"Implicit Parameter Resolution",permalink:"/docs/capabilities/implicits/"},next:{title:"Use Case: CallerData",permalink:"/docs/capabilities/implicits/caller-data"}},s={},l=[],p={toc:l},d="wrapper";function u(e){let{components:n,...t}=e;return(0,r.kt)(d,(0,i.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"use-case-dependency-injection"},"Use Case: Dependency Injection"),(0,r.kt)("p",null,"Lets say we have this code:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cs"},"static Guid Save(\n  Person person, DataStore store, JsonSerializer<Person> serializer\n) {\n  var json = serializer.ToJson(person);\n  var guid = Guid.NewGuid();\n  store.Save(guid, json);\n  return guid;\n}\n")),(0,r.kt)("p",null,"Only the ",(0,r.kt)("inlineCode",{parentName:"p"},"person")," parameter is actual data. ",(0,r.kt)("inlineCode",{parentName:"p"},"store")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"serializer")," are dependencies, which we need to provide."),(0,r.kt)("p",null,"In general, this pattern is called ",(0,r.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Dependency_injection"},"dependency injection")," and there has been multiple dependency-injection frameworks developed for C#, with two notable examples being ",(0,r.kt)("a",{parentName:"p",href:"http://www.ninject.org/"},"NInject")," for general-purpose C# and ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/modesttree/Zenject"},"Zenject")," for Unity."),(0,r.kt)("p",null,"However, all of the dependency-injection frameworks rely on binding everything in runtime. Which can be a benefit, because it allows to change the bindings while the code is running, and a negative as well - because you will only know about misconfiguration when the code is ran."),(0,r.kt)("p",null,"If you want to avoid that and know about misconfiguration in compile time you can use implicits for compile-time dependency injection."),(0,r.kt)("p",null,"For example, the same method can be rewritten with the following function signature:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cs"},"static Guid Save(\n  Person person, \n  [Implicit] DataStore store = default, \n  [Implicit] JsonSerializer<Person> serializer = default\n)\n")),(0,r.kt)("p",null,"Then you can have the default dependency container:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cs"},"public static class DefaultDependencies {\n  [Implicit] public static readonly DataStore DefaultStore = /* ... */;\n  [Implicit] public static readonly JsonSerializer<Person> PersonJsonSerializer = /* ... */;\n}\n")),(0,r.kt)("p",null,"And invocations to ",(0,r.kt)("inlineCode",{parentName:"p"},"Save")," will pick these up automatically."),(0,r.kt)("p",null,"When you want to override them in tests, you can then provide the changed values in a higher precedence scope like this:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cs"},"public abstract class TestBase {\n  [Implicit] public readonly DataStore TestDataStore = /* ... */;\n}\n\npublic class MyTest : TestBase {\n  [Test]\n  public void TestSaving() {\n    var person = new Person(/* ... */);\n    // This will use the `TestDataStore` instead of `DefaultDependencies.DefaultStore`\n    // as the `TestBase` implicit scope is narrower than the global implicit scope.\n    Save(person);\n  }\n}\n")))}u.isMDXComponent=!0}}]);