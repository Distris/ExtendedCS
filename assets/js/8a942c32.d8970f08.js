"use strict";(self.webpackChunkcsharp_extended_compiler=self.webpackChunkcsharp_extended_compiler||[]).push([[4493],{3905:(t,e,l)=>{l.d(e,{Zo:()=>s,kt:()=>m});var n=l(7294);function r(t,e,l){return e in t?Object.defineProperty(t,e,{value:l,enumerable:!0,configurable:!0,writable:!0}):t[e]=l,t}function a(t,e){var l=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),l.push.apply(l,n)}return l}function i(t){for(var e=1;e<arguments.length;e++){var l=null!=arguments[e]?arguments[e]:{};e%2?a(Object(l),!0).forEach((function(e){r(t,e,l[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(l)):a(Object(l)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(l,e))}))}return t}function o(t,e){if(null==t)return{};var l,n,r=function(t,e){if(null==t)return{};var l,n,r={},a=Object.keys(t);for(n=0;n<a.length;n++)l=a[n],e.indexOf(l)>=0||(r[l]=t[l]);return r}(t,e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(t);for(n=0;n<a.length;n++)l=a[n],e.indexOf(l)>=0||Object.prototype.propertyIsEnumerable.call(t,l)&&(r[l]=t[l])}return r}var u=n.createContext({}),d=function(t){var e=n.useContext(u),l=e;return t&&(l="function"==typeof t?t(e):i(i({},e),t)),l},s=function(t){var e=d(t.components);return n.createElement(u.Provider,{value:e},t.children)},p="mdxType",k={inlineCode:"code",wrapper:function(t){var e=t.children;return n.createElement(n.Fragment,{},e)}},c=n.forwardRef((function(t,e){var l=t.components,r=t.mdxType,a=t.originalType,u=t.parentName,s=o(t,["components","mdxType","originalType","parentName"]),p=d(l),c=r,m=p["".concat(u,".").concat(c)]||p[c]||k[c]||a;return l?n.createElement(m,i(i({ref:e},s),{},{components:l})):n.createElement(m,i({ref:e},s))}));function m(t,e){var l=arguments,r=e&&e.mdxType;if("string"==typeof t||r){var a=l.length,i=new Array(a);i[0]=c;var o={};for(var u in e)hasOwnProperty.call(e,u)&&(o[u]=e[u]);o.originalType=t,o[p]="string"==typeof t?t:r,i[1]=o;for(var d=2;d<a;d++)i[d]=l[d];return n.createElement.apply(null,i)}return n.createElement.apply(null,l)}c.displayName="MDXCreateElement"},4755:(t,e,l)=>{l.r(e),l.d(e,{assets:()=>u,contentTitle:()=>i,default:()=>k,frontMatter:()=>a,metadata:()=>o,toc:()=>d});var n=l(7462),r=(l(7294),l(3905));const a={},i="TODO: Scriban-Based Macros",o={unversionedId:"macros/scriban-based/index",id:"macros/scriban-based/index",title:"TODO: Scriban-Based Macros",description:"You can write your own logic using the scriban template engine with [AttributeMacro].",source:"@site/docs/macros/scriban-based/index.md",sourceDirName:"macros/scriban-based",slug:"/macros/scriban-based/",permalink:"/ExtendedCS/docs/macros/scriban-based/",draft:!1,editUrl:"https://github.com/distris/ExtendedCS/tree/main/docs/macros/scriban-based/index.md",tags:[],version:"current",frontMatter:{},sidebar:"docsSidebar",previous:{title:"Use Cases",permalink:"/ExtendedCS/docs/macros/attribute-based/use-cases"},next:{title:"TODO: C#-Based Macros",permalink:"/ExtendedCS/docs/macros/csharp-based/"}},u={},d=[{value:"Scriban",id:"scriban",level:2},{value:"Parameters",id:"parameters",level:2},{value:"<code>type</code>",id:"type",level:3},{value:"<code>fieldName</code>",id:"fieldname",level:3},{value:"Field Parameters",id:"field-parameters",level:2},{value:"<code>field</code>",id:"field",level:3},{value:"Property Parameters",id:"property-parameters",level:2},{value:"<code>property</code>",id:"property",level:3},{value:"Field or Property Parameters",id:"field-or-property-parameters",level:2},{value:"<code>field_or_prop</code>",id:"field_or_prop",level:3},{value:"Types",id:"types",level:2},{value:"Type",id:"type-1",level:3},{value:"Field",id:"field-1",level:3},{value:"Property",id:"property-1",level:3},{value:"Method",id:"method",level:3},{value:"EnumValue",id:"enumvalue",level:3},{value:"PropParam",id:"propparam",level:3}],s={toc:d},p="wrapper";function k(t){let{components:e,...l}=t;return(0,r.kt)(p,(0,n.Z)({},s,l,{components:e,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"todo-scriban-based-macros"},"TODO: Scriban-Based Macros"),(0,r.kt)("p",null,"You can write your own logic using the ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/scriban/scriban"},"scriban template engine")," with ",(0,r.kt)("inlineCode",{parentName:"p"},"[AttributeMacro]"),"."),(0,r.kt)("p",null,"Add this ",(0,r.kt)("inlineCode",{parentName:"p"},"[AttributeMacro]")," attribute on your own custom attribute:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cs"},'using System;\n\n[AttributeMacro(@"\n  scriban code goes here\n")]\npublic class MyAttribute : Attribute {}\n')),(0,r.kt)("p",null,"Then your custom attribute (",(0,r.kt)("inlineCode",{parentName:"p"},"[MyAttribute]")," in this case) will generate new type members or extension methods when used on a type definition (class, struct or enum)."),(0,r.kt)("h2",{id:"scriban"},"Scriban"),(0,r.kt)("p",null,"Scriban is a templating language, similar to PHP."),(0,r.kt)("p",null,"Reference links to the most useful documentation:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/scriban/scriban/blob/master/doc/language.md"},"Language description")," ","\u2014"," describes how blocks, control statements, comments, templating works."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/scriban/scriban/blob/master/doc/builtins.md"},"Built-in functions")," ","\u2014"," a comprehensive list of built-in functions available for you.")),(0,r.kt)("h2",{id:"parameters"},"Parameters"),(0,r.kt)("p",null,"These parameters are always exposed to the scriban template:"),(0,r.kt)("h3",{id:"type"},(0,r.kt)("inlineCode",{parentName:"h3"},"type")),(0,r.kt)("p",null,"The current type of class/struct/enum or the containing type if your attribute is attached to a field or a property."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Parameter type:")," ",(0,r.kt)("a",{parentName:"p",href:"#type-1"},"Type")),(0,r.kt)("h3",{id:"fieldname"},(0,r.kt)("inlineCode",{parentName:"h3"},"fieldName")),(0,r.kt)("p",null,"Refers to a field value of field ",(0,r.kt)("inlineCode",{parentName:"p"},"fieldName")," on your custom attribute."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Parameter type:")," mapped from the C# type using the following mapping."),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"C# type"),(0,r.kt)("th",{parentName:"tr",align:null},"Scriban Type"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"bool")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"https://github.com/scriban/scriban/blob/master/doc/language.md#33-boolean"},"boolean"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"string")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"https://github.com/scriban/scriban/blob/master/doc/language.md#31-strings"},"string"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"numeric types (",(0,r.kt)("inlineCode",{parentName:"td"},"int"),", ",(0,r.kt)("inlineCode",{parentName:"td"},"uint"),", etc.)"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"https://github.com/scriban/scriban/blob/master/doc/language.md#32-numbers"},"number"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"arrays (",(0,r.kt)("inlineCode",{parentName:"td"},"string[]"),", ",(0,r.kt)("inlineCode",{parentName:"td"},"int[]"),", etc.)"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"https://github.com/scriban/scriban/blob/master/doc/language.md#6-arrays"},"array"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"System.Type")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"#type-1"},"Type"))))),(0,r.kt)("p",null,"For example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cs"},'[AttributeMacro(@"\n{{\n  # Note that by default the parameters are undefined.\n  if !is_var_defined \'ParameterName\'\n    throw \'Please define a value for parameter ""ParameterName""\'\n  end\n}}\n\npublic void newMethod(string {{ ParameterName }}) {\n  System.Console.WriteLine($""Hi from {ParameterName}!"");\n}\n")]\npublic class MyAttribute : Attribute {\n  public string ParameterName;\n}\n')),(0,r.kt)("h2",{id:"field-parameters"},"Field Parameters"),(0,r.kt)("p",null,"These parameters are only exposed if an attribute is added to a field:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cs"},"[MyScribanMacro] public int MyField;\n")),(0,r.kt)("h3",{id:"field"},(0,r.kt)("inlineCode",{parentName:"h3"},"field")),(0,r.kt)("p",null,"The field that this macro is attached to. In the example case this would be the ",(0,r.kt)("inlineCode",{parentName:"p"},"int MyField")," field."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Parameter type:")," ",(0,r.kt)("a",{parentName:"p",href:"#field-1"},"Field")),(0,r.kt)("h2",{id:"property-parameters"},"Property Parameters"),(0,r.kt)("p",null,"These parameters are only exposed if an attribute is added to a property:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cs"},"[MyScribanMacro] public int MyProperty { get; set; }\n")),(0,r.kt)("h3",{id:"property"},(0,r.kt)("inlineCode",{parentName:"h3"},"property")),(0,r.kt)("p",null,"The property that this macro is attached to. In the example case this would be the ",(0,r.kt)("inlineCode",{parentName:"p"},"int MyProperty")," property."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Parameter type:")," ",(0,r.kt)("a",{parentName:"p",href:"#property-1"},"Property")),(0,r.kt)("h2",{id:"field-or-property-parameters"},"Field or Property Parameters"),(0,r.kt)("p",null,"These parameters are exposed if an attribute is added to a field or property:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cs"},"[MyScribanMacro] public int MyField;\n[MyScribanMacro] public int MyProperty { get; set; }\n")),(0,r.kt)("p",null,"They make writing templates which work on both fields and properties easier to write."),(0,r.kt)("h3",{id:"field_or_prop"},(0,r.kt)("inlineCode",{parentName:"h3"},"field_or_prop")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Parameter type:")," ",(0,r.kt)("a",{parentName:"p",href:"#field-1"},(0,r.kt)("inlineCode",{parentName:"a"},"Field"))," or ",(0,r.kt)("a",{parentName:"p",href:"#property-1"},(0,r.kt)("inlineCode",{parentName:"a"},"Property")),"."),(0,r.kt)("p",null,"The respective data from either a ",(0,r.kt)("a",{parentName:"p",href:"#field"},(0,r.kt)("inlineCode",{parentName:"a"},"field"))," or ",(0,r.kt)("a",{parentName:"p",href:"#property"},(0,r.kt)("inlineCode",{parentName:"a"},"property"))," parameters."),(0,r.kt)("h2",{id:"types"},"Types"),(0,r.kt)("p",null,"In addition to built-in scriban types, the compiler defines additional types."),(0,r.kt)("h3",{id:"type-1"},"Type"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"Type")," type has these properties exposed to scriban:"),(0,r.kt)("table",null,(0,r.kt)("thead",null,(0,r.kt)("tr",null,(0,r.kt)("th",null,"Name"),(0,r.kt)("th",null,"Type"),(0,r.kt)("th",null,"Description"))),(0,r.kt)("tr",null,(0,r.kt)("td",null,"name"),(0,r.kt)("td",null,"string"),(0,r.kt)("td",null,"The fully qualified type name, for example ",(0,r.kt)("code",null,"global::System.Collections.Generic.List<int>"),".")),(0,r.kt)("tr",null,(0,r.kt)("td",null,"short_name"),(0,r.kt)("td",null,"string"),(0,r.kt)("td",null,"The type name without the namespace and generic parameters, for example ",(0,r.kt)("code",null,"List"),".")),(0,r.kt)("tr",null,(0,r.kt)("td",null,"visibility_modifier"),(0,r.kt)("td",null,"string"),(0,r.kt)("td",null,"One of ",(0,r.kt)("code",null,"public"),", ",(0,r.kt)("code",null,"private"),", ",(0,r.kt)("code",null,"protected"),", ",(0,r.kt)("code",null,"internal")," or ",(0,r.kt)("code",null,"protected internal"),".")),(0,r.kt)("tr",null,(0,r.kt)("td",{id:"underlying_enum_type"},"underlying_enum_type"),(0,r.kt)("td",null,(0,r.kt)("code",null,(0,r.kt)("a",{href:"#type-1"},"Type?"))),(0,r.kt)("td",null,"If this ",(0,r.kt)("code",null,"Type")," is an ",(0,r.kt)("code",null,"enum"),", then this will have the underlying type of that ",(0,r.kt)("code",null,"enum"),".",(0,r.kt)("p",null),"For example, ",(0,r.kt)("code",null,"enum MyEnum : byte { Case1, Case2 }")," has an underlying type of ",(0,r.kt)("code",null,"byte"),".",(0,r.kt)("p",null),(0,r.kt)("a",{href:"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/language-specification/enums#192-enum-declarations"},(0,r.kt)("code",null,"enum"),"s that do not have an underlying type specified explicitly will use ",(0,r.kt)("code",null,"int")," as its underlying type"),"."))),(0,r.kt)("h3",{id:"field-1"},"Field"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"Field")," type has these properties exposed to scriban:"),(0,r.kt)("table",null,(0,r.kt)("thead",null,(0,r.kt)("tr",null,(0,r.kt)("th",null,"Name"),(0,r.kt)("th",null,"Type"),(0,r.kt)("th",null,"Description"))),(0,r.kt)("tr",null,(0,r.kt)("td",null,"name"),(0,r.kt)("td",null,"string"),(0,r.kt)("td",null,"The name of the field in C#, for example ",(0,r.kt)("code",null,"MyField")," for ",(0,r.kt)("code",null,"string MyField;"))),(0,r.kt)("tr",null,(0,r.kt)("td",null,"type"),(0,r.kt)("td",null,(0,r.kt)("a",{href:"#type-1"},"Type")),(0,r.kt)("td",null,"The type of the field in C#, for example ",(0,r.kt)("code",null,"string")," for ",(0,r.kt)("code",null,"string MyField;"))),(0,r.kt)("tr",null,(0,r.kt)("td",null,"is_read_only"),(0,r.kt)("td",null,"boolean"),(0,r.kt)("td",null,"true if this is a readonly field, such as ",(0,r.kt)("code",null,"readonly string MyField;"))),(0,r.kt)("tr",null,(0,r.kt)("td",null,"is_const"),(0,r.kt)("td",null,"boolean"),(0,r.kt)("td",null,"true if this is a constant field, such as ",(0,r.kt)("code",null,'const string MY_CONSTANT = "value";'))),(0,r.kt)("tr",null,(0,r.kt)("td",null,"constant_value"),(0,r.kt)("td",null,"object?"),(0,r.kt)("td",null,"Constant value that we get from compiler API. Available for constant fields. For example, for ",(0,r.kt)("code",null,'const string MY_CONSTANT = "value";')," this would be ",(0,r.kt)("code",null,'"value"'),".")),(0,r.kt)("tr",null,(0,r.kt)("td",null,"is_property"),(0,r.kt)("td",null,"boolean"),(0,r.kt)("td",null,"Whether this is a property. Always ",(0,r.kt)("code",null,"false"),".")),(0,r.kt)("tr",null,(0,r.kt)("td",null,"is_field"),(0,r.kt)("td",null,"boolean"),(0,r.kt)("td",null,"Whether this is a field. Always ",(0,r.kt)("code",null,"true"),".")),(0,r.kt)("tr",null,(0,r.kt)("td",null,"is_method"),(0,r.kt)("td",null,"boolean"),(0,r.kt)("td",null,"Whether this is a method. Always ",(0,r.kt)("code",null,"false"),".")),(0,r.kt)("tr",null,(0,r.kt)("td",null,"is_static"),(0,r.kt)("td",null,"boolean"),(0,r.kt)("td",null,"Whether this is a static field, like ",(0,r.kt)("code",null,"static int MyField;"))),(0,r.kt)("tr",null,(0,r.kt)("td",null,"is_private"),(0,r.kt)("td",null,"boolean"),(0,r.kt)("td",null,"Whether this is a private field, like ",(0,r.kt)("code",null,"private int MyField;"))),(0,r.kt)("tr",null,(0,r.kt)("td",null,"is_protected"),(0,r.kt)("td",null,"boolean"),(0,r.kt)("td",null,"Whether this is a protected field, like ",(0,r.kt)("code",null,"protected int MyField;"))),(0,r.kt)("tr",null,(0,r.kt)("td",null,"is_internal"),(0,r.kt)("td",null,"boolean"),(0,r.kt)("td",null,"Whether this is an internal field, like ",(0,r.kt)("code",null,"internal int MyField;"))),(0,r.kt)("tr",null,(0,r.kt)("td",null,"is_public"),(0,r.kt)("td",null,"boolean"),(0,r.kt)("td",null,"Whether this is a public field, like ",(0,r.kt)("code",null,"public int MyField;"))),(0,r.kt)("tr",null,(0,r.kt)("td",null,"visibility_modifier"),(0,r.kt)("td",null,"string"),(0,r.kt)("td",null,"One of ",(0,r.kt)("code",null,"public"),", ",(0,r.kt)("code",null,"private"),", ",(0,r.kt)("code",null,"protected"),", ",(0,r.kt)("code",null,"internal")," or ",(0,r.kt)("code",null,"protected internal"),".")),(0,r.kt)("tr",null,(0,r.kt)("td",null,"is_abstract"),(0,r.kt)("td",null,"boolean"),(0,r.kt)("td",null,"As fields cannot be abstract in C# this is always ",(0,r.kt)("code",null,"false"),".")),(0,r.kt)("tr",null,(0,r.kt)("td",null,"is_virtual"),(0,r.kt)("td",null,"boolean"),(0,r.kt)("td",null,"As fields cannot be virtual in C# this is always ",(0,r.kt)("code",null,"false"),"."))),(0,r.kt)("h3",{id:"property-1"},"Property"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"Property")," type has these properties exposed to scriban:"),(0,r.kt)("table",null,(0,r.kt)("thead",null,(0,r.kt)("tr",null,(0,r.kt)("th",null,"Name"),(0,r.kt)("th",null,"Type"),(0,r.kt)("th",null,"Description"))),(0,r.kt)("tr",null,(0,r.kt)("td",null,"name"),(0,r.kt)("td",null,"string"),(0,r.kt)("td",null,"The name of the property in C#, for example ",(0,r.kt)("code",null,"MyProp")," for ",(0,r.kt)("code",null,"string MyProp { get; set; }"))),(0,r.kt)("tr",null,(0,r.kt)("td",null,"type"),(0,r.kt)("td",null,(0,r.kt)("a",{href:"#type-1"},"Type")),(0,r.kt)("td",null,"The type of the property in C#, for example ",(0,r.kt)("code",null,"string")," for ",(0,r.kt)("code",null,"string MyProp { get; set; }"))),(0,r.kt)("tr",null,(0,r.kt)("td",null,"is_read_only"),(0,r.kt)("td",null,"boolean"),(0,r.kt)("td",null,"Whether the property can only be read, for example ",(0,r.kt)("code",null,"string MyProp { get; }"))),(0,r.kt)("tr",null,(0,r.kt)("td",null,"is_write_only"),(0,r.kt)("td",null,"boolean"),(0,r.kt)("td",null,"Whether the property can only be written, for example ",(0,r.kt)("code",null,"string MyProp { set; }"))),(0,r.kt)("tr",null,(0,r.kt)("td",null,"has_getter"),(0,r.kt)("td",null,"boolean"),(0,r.kt)("td",null,"Whether the property has the ",(0,r.kt)("code",null,"get;")," part, for example ",(0,r.kt)("code",null,"string MyProp { get; }")," or ",(0,r.kt)("code",null,"string MyProp { get; set; }"))),(0,r.kt)("tr",null,(0,r.kt)("td",null,"has_setter"),(0,r.kt)("td",null,"boolean"),(0,r.kt)("td",null,"Whether the property has the ",(0,r.kt)("code",null,"set;")," part, for example ",(0,r.kt)("code",null,"string MyProp { set; }")," or ",(0,r.kt)("code",null,"string MyProp { get; set; }"))),(0,r.kt)("tr",null,(0,r.kt)("td",null,"parameters"),(0,r.kt)("td",null,(0,r.kt)("a",{href:"#prop-param"},(0,r.kt)("code",null,"PropParam[]"))),(0,r.kt)("td",null,"If this property is an ",(0,r.kt)("a",{href:"https://learn.microsoft.com/en-us/dotnet/csharp/programming-guide/indexers/"},"indexer")," (such as ",(0,r.kt)("code",null,"int this[string key1, string key2] => ...;"),"), this returns an array of the parameters provided to the indexer.")),(0,r.kt)("tr",null,(0,r.kt)("td",null,"is_property"),(0,r.kt)("td",null,"boolean"),(0,r.kt)("td",null,"Whether this is a property. Always ",(0,r.kt)("code",null,"true"),".")),(0,r.kt)("tr",null,(0,r.kt)("td",null,"is_field"),(0,r.kt)("td",null,"boolean"),(0,r.kt)("td",null,"Whether this is a field. Always ",(0,r.kt)("code",null,"false"),".")),(0,r.kt)("tr",null,(0,r.kt)("td",null,"is_method"),(0,r.kt)("td",null,"boolean"),(0,r.kt)("td",null,"Whether this is a method. Always ",(0,r.kt)("code",null,"false"),".")),(0,r.kt)("tr",null,(0,r.kt)("td",null,"is_static"),(0,r.kt)("td",null,"boolean"),(0,r.kt)("td",null,"Whether this is a static property, like ",(0,r.kt)("code",null,"static int MyProp { get; set; }"))),(0,r.kt)("tr",null,(0,r.kt)("td",null,"is_private"),(0,r.kt)("td",null,"boolean"),(0,r.kt)("td",null,"Whether this is a static property, like ",(0,r.kt)("code",null,"private int MyProp { get; set; }"))),(0,r.kt)("tr",null,(0,r.kt)("td",null,"is_protected"),(0,r.kt)("td",null,"boolean"),(0,r.kt)("td",null,"Whether this is a protected property, like ",(0,r.kt)("code",null,"protected int MyProp { get; set; }"))),(0,r.kt)("tr",null,(0,r.kt)("td",null,"is_internal"),(0,r.kt)("td",null,"boolean"),(0,r.kt)("td",null,"Whether this is an internal property, like ",(0,r.kt)("code",null,"internal int MyProp { get; set; }"))),(0,r.kt)("tr",null,(0,r.kt)("td",null,"is_public"),(0,r.kt)("td",null,"boolean"),(0,r.kt)("td",null,"Whether this is a public property, like ",(0,r.kt)("code",null,"public int MyProp { get; set; }"))),(0,r.kt)("tr",null,(0,r.kt)("td",null,"visibility_modifier"),(0,r.kt)("td",null,"string"),(0,r.kt)("td",null,"One of ",(0,r.kt)("code",null,"public"),", ",(0,r.kt)("code",null,"private"),", ",(0,r.kt)("code",null,"protected"),", ",(0,r.kt)("code",null,"internal")," or ",(0,r.kt)("code",null,"protected internal"),".")),(0,r.kt)("tr",null,(0,r.kt)("td",null,"is_abstract"),(0,r.kt)("td",null,"boolean"),(0,r.kt)("td",null,"True if this is an abstract property, such as ",(0,r.kt)("code",null,"abstract int MyProp { get; set; }"))),(0,r.kt)("tr",null,(0,r.kt)("td",null,"is_virtual"),(0,r.kt)("td",null,"boolean"),(0,r.kt)("td",null,"True if this is an virtual property, such as ",(0,r.kt)("code",null,"public virtual int MyProp { get; set; }")))),(0,r.kt)("h3",{id:"method"},"Method"),(0,r.kt)("p",null,"  ///   ",(0,r.kt)("li",null,(0,r.kt)("b",null,"return_type"),": Type"),"\n///   ",(0,r.kt)("li",null,(0,r.kt)("b",null,"is_read_only"),": bool"),"\n///   ",(0,r.kt)("li",null,(0,r.kt)("b",null,"parameters"),": { name: string, type: Type }"),"\n///   ",(0,r.kt)("li",null,(0,r.kt)("b",null,"type_parameters"),': {\n///     name: string,\n///     additional_constraint: string? ("struct" | "class" | "unmanaged" | null),\n///     has_constructor_constraint: bool,\n///     constraint_types: Type[],\n///   }'),"\n///\n///   ",(0,r.kt)("li",null,(0,r.kt)("b",null,"is_property"),": bool - false"),"\n///   ",(0,r.kt)("li",null,(0,r.kt)("b",null,"is_field"),": bool - false"),"\n///   ",(0,r.kt)("li",null,(0,r.kt)("b",null,"is_method"),": bool - true"),"\n///   ",(0,r.kt)("li",null,(0,r.kt)("b",null,"is_static"),": bool"),"\n///   ",(0,r.kt)("li",null,(0,r.kt)("b",null,"is_abstract"),": bool"),"\n///   ",(0,r.kt)("li",null,(0,r.kt)("b",null,"is_virtual"),": bool"),"\n///   ",(0,r.kt)("li",null,(0,r.kt)("b",null,"is_private"),": bool"),"\n///   ",(0,r.kt)("li",null,(0,r.kt)("b",null,"is_public"),": bool"),"\n///   ",(0,r.kt)("li",null,(0,r.kt)("b",null,"is_internal"),": bool"),"\n///   ",(0,r.kt)("li",null,(0,r.kt)("b",null,"is_protected"),": bool"),"\n///   ",(0,r.kt)("li",null,(0,r.kt)("b",null,"visibility_modifier"),': string = "public", "private", "protected", "internal", "protected internal",\n/// "not_applicable"')),(0,r.kt)("h3",{id:"enumvalue"},"EnumValue"),(0,r.kt)("p",null,"One of the defined cases in an ",(0,r.kt)("inlineCode",{parentName:"p"},"enum MyEnum { Case1, Case2 }")," declaration."),(0,r.kt)("p",null,"It has these properties exposed to scriban:"),(0,r.kt)("table",null,(0,r.kt)("thead",null,(0,r.kt)("tr",null,(0,r.kt)("th",null,"Name"),(0,r.kt)("th",null,"Type"),(0,r.kt)("th",null,"Description"))),(0,r.kt)("tr",null,(0,r.kt)("td",null,"name"),(0,r.kt)("td",null,"string"),(0,r.kt)("td",null,"The fully qualified enum value name, for example ",(0,r.kt)("code",null,"global::MyNamespace.MyEnum.Case1"),".")),(0,r.kt)("tr",null,(0,r.kt)("td",null,"short_name"),(0,r.kt)("td",null,"string"),(0,r.kt)("td",null,"The case name without the namespace and enum name, for example ",(0,r.kt)("code",null,"Case1"),".")),(0,r.kt)("tr",null,(0,r.kt)("td",null,"value"),(0,r.kt)("td",null,"object"),(0,r.kt)("td",null,"Value assigned to this enum member, usually an ",(0,r.kt)("code",null,"int"),". Also see information about ",(0,r.kt)("a",{href:"#underlying_enum_type"},"underlying enum types"),"."))),(0,r.kt)("h3",{id:"propparam"},"PropParam"),(0,r.kt)("p",null,"Parameter provided to an ",(0,r.kt)("a",{href:"https://learn.microsoft.com/en-us/dotnet/csharp/programming-guide/indexers/"},"indexer property"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cs"},"class SampleCollection<T> {\n  // Declare an array to store the data elements.\n  private T[] arr = new T[100];\n\n  // Define the indexer to allow client code to use [] notation.\n  public T this[int idx] {\n    get { return arr[idx]; }\n    set { arr[idx] = value; }\n  }\n}\n")),(0,r.kt)("p",null,"It has these properties exposed to scriban:"),(0,r.kt)("table",null,(0,r.kt)("thead",null,(0,r.kt)("tr",null,(0,r.kt)("th",null,"Name"),(0,r.kt)("th",null,"Type"),(0,r.kt)("th",null,"Description"))),(0,r.kt)("tr",null,(0,r.kt)("td",null,"name"),(0,r.kt)("td",null,"string"),(0,r.kt)("td",null,"The name of the parameter, for example ",(0,r.kt)("code",null,"idx"),".")),(0,r.kt)("tr",null,(0,r.kt)("td",null,"type"),(0,r.kt)("td",null,(0,r.kt)("a",{href:"#type-1"},"Type")),(0,r.kt)("td",null,"The type of the parameter, for example ",(0,r.kt)("code",null,"int"),"."))))}k.isMDXComponent=!0}}]);