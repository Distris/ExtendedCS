"use strict";(self.webpackChunkcsharp_extended_compiler=self.webpackChunkcsharp_extended_compiler||[]).push([[2818],{3905:(e,r,t)=>{t.d(r,{Zo:()=>c,kt:()=>f});var n=t(7294);function a(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function o(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);r&&(n=n.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,n)}return t}function s(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?o(Object(t),!0).forEach((function(r){a(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function i(e,r){if(null==e)return{};var t,n,a=function(e,r){if(null==e)return{};var t,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)t=o[n],r.indexOf(t)>=0||(a[t]=e[t]);return a}(e,r);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)t=o[n],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var l=n.createContext({}),u=function(e){var r=n.useContext(l),t=r;return e&&(t="function"==typeof e?e(r):s(s({},r),e)),t},c=function(e){var r=u(e.components);return n.createElement(l.Provider,{value:r},e.children)},p="mdxType",m={inlineCode:"code",wrapper:function(e){var r=e.children;return n.createElement(n.Fragment,{},r)}},d=n.forwardRef((function(e,r){var t=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),p=u(t),d=a,f=p["".concat(l,".").concat(d)]||p[d]||m[d]||o;return t?n.createElement(f,s(s({ref:r},c),{},{components:t})):n.createElement(f,s({ref:r},c))}));function f(e,r){var t=arguments,a=r&&r.mdxType;if("string"==typeof e||a){var o=t.length,s=new Array(o);s[0]=d;var i={};for(var l in r)hasOwnProperty.call(r,l)&&(i[l]=r[l]);i.originalType=e,i[p]="string"==typeof e?e:a,s[1]=i;for(var u=2;u<o;u++)s[u]=t[u];return n.createElement.apply(null,s)}return n.createElement.apply(null,t)}d.displayName="MDXCreateElement"},4023:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>l,contentTitle:()=>s,default:()=>m,frontMatter:()=>o,metadata:()=>i,toc:()=>u});var n=t(7462),a=(t(7294),t(3905));const o={sidebar_position:3.5},s="VarMacro",i={unversionedId:"macros/attribute-based/var-macro",id:"macros/attribute-based/var-macro",title:"VarMacro",description:"VarMacro] is sort of a blend between [[ExpressionMacro] and [StatementMacro].",source:"@site/docs/macros/attribute-based/var-macro.md",sourceDirName:"macros/attribute-based",slug:"/macros/attribute-based/var-macro",permalink:"/docs/macros/attribute-based/var-macro",draft:!1,editUrl:"https://github.com/distris/ExtendedCS/tree/main/docs/macros/attribute-based/var-macro.md",tags:[],version:"current",sidebarPosition:3.5,frontMatter:{sidebar_position:3.5},sidebar:"docsSidebar",previous:{title:"StatementMacro",permalink:"/docs/macros/attribute-based/statement-macro"},next:{title:"Parameters and Functions",permalink:"/docs/macros/attribute-based/parameters-and-functions"}},l={},u=[{value:"Syntax",id:"syntax",level:2}],c={toc:u},p="wrapper";function m(e){let{components:r,...t}=e;return(0,a.kt)(p,(0,n.Z)({},c,t,{components:r,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"varmacro"},"VarMacro"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"[VarMacro]")," is sort of a blend between ",(0,a.kt)("a",{parentName:"p",href:"/docs/macros/attribute-based/expression-macro"},(0,a.kt)("inlineCode",{parentName:"a"},"[ExpressionMacro]"))," and ",(0,a.kt)("a",{parentName:"p",href:"/docs/macros/attribute-based/statement-macro"},(0,a.kt)("inlineCode",{parentName:"a"},"[StatementMacro]")),"."),(0,a.kt)("p",null,"It works by replacing ",(0,a.kt)("inlineCode",{parentName:"p"},"var")," statements that bind to expressions (like ",(0,a.kt)("inlineCode",{parentName:"p"},"var x = MyMacro();"),") with more statements."),(0,a.kt)("p",null,"For example, lets introduce the ",(0,a.kt)("a",{parentName:"p",href:"https://doc.rust-lang.org/std/result/#the-question-mark-operator-"},(0,a.kt)("inlineCode",{parentName:"a"},"?")," operator from Rust")," into C#."),(0,a.kt)("p",null,"First we need to declare the ",(0,a.kt)("inlineCode",{parentName:"p"},"Result<TValue, TError>")," type:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cs"},"public readonly struct Result<TValue, TError> {\n  public readonly bool IsValue;\n  public bool IsError => !IsValue;\n  public readonly TValue __UnsafeValue;\n  public readonly TError __UnsafeError;\n\n  public Result(TValue value) {\n    IsValue = true;\n    __UnsafeValue = value;\n    __UnsafeError = default;\n  }\n\n  public Result(TError error) {\n    IsValue = false;\n    __UnsafeValue = default;\n    __UnsafeError = error;\n  }\n}\n")),(0,a.kt)("p",null,"Now we can introduce the ",(0,a.kt)("inlineCode",{parentName:"p"},"?")," operator. Because C# does not allow using custom operators, we will name it ",(0,a.kt)("inlineCode",{parentName:"p"},"ValueOr_RETURN"),"."),(0,a.kt)("admonition",{type:"tip"},(0,a.kt)("p",{parentName:"admonition"},"We suggest using odd looking names like ",(0,a.kt)("inlineCode",{parentName:"p"},"_RETURN")," to separate out the macro functions from regular ones.")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cs"},'/// <summary>\n/// Represents either a successful computation that resulted in a value\n/// or a computation that failed with an error.\n/// </summary>\npublic readonly struct Result<TValue, TError> {\n  [VarMacro(@"\n    var {{ uniqueId }} = {{ self }};\n    if ({{ uniqueId }}.IsError) return {{ uniqueId }}.__UnsafeError;\n    {{ varType }} {{ varName }} = {{ uniqueId }}.__UnsafeValue;\n  ")]\n  public TValue ValueOr_RETURN() => \n    throw new MacroException();\n\n  // Implicit conversions are needed so we could just return the error \n  // and get it wrapped in `Result` automatically.\n\n  public static implicit operator Result<TValue, TError>(TError error) => \n    new Result<TValue, TError>(error);\n\n  public static implicit operator Result<TValue, TError>(TValue value) => \n    new Result<TValue, TError>(value);\n}\n')),(0,a.kt)("p",null,"Then this code:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cs"},"Result<int, string> AddResults(\n  Result<int, string> num1Result, \n  Result<int, string> num2Result\n) {\n  var num1 = num1Result.ValueOr_RETURN();\n  var num2 = num2Result.ValueOr_RETURN();\n  return num1 + num2;\n}\n")),(0,a.kt)("p",null,"Will be compiled to:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cs"},"static Result<int, string> AddResults(\n  Result<int, string> num1Result, \n  Result<int, string> num2Result\n) {\n  var id_1136_1163 = num1Result;\n  if (id_1136_1163.IsError)\n    return id_1136_1163.__UnsafeError;\n  int num1 = id_1136_1163.__UnsafeValue;\n  var id_1181_1208 = num2Result;\n  if (id_1181_1208.IsError)\n    return id_1181_1208.__UnsafeError;\n  int num2 = id_1181_1208.__UnsafeValue;\n  return num1 + num2;\n}\n")),(0,a.kt)("p",null,"Which gives us the same developer experience in C# as in Rust."),(0,a.kt)("h2",{id:"syntax"},"Syntax"),(0,a.kt)("p",null,"The pattern for ",(0,a.kt)("inlineCode",{parentName:"p"},"VarMacro")," is evaluated with ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/scriban/scriban"},"scriban")," templating language."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cs"},'[VarMacro("scriban goes here")]\n')),(0,a.kt)("p",null,"See ",(0,a.kt)("a",{parentName:"p",href:"/docs/macros/attribute-based/parameters-and-functions"},"parameters and functions")," for additional information."))}m.isMDXComponent=!0}}]);