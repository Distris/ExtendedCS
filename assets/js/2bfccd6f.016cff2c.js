"use strict";(self.webpackChunkcsharp_extended_compiler=self.webpackChunkcsharp_extended_compiler||[]).push([[7104],{3905:(e,t,r)=>{r.d(t,{Zo:()=>p,kt:()=>b});var n=r(7294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function c(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var s=n.createContext({}),l=function(e){var t=n.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},p=function(e){var t=l(e.components);return n.createElement(s.Provider,{value:t},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,a=e.originalType,s=e.parentName,p=c(e,["components","mdxType","originalType","parentName"]),d=l(r),m=o,b=d["".concat(s,".").concat(m)]||d[m]||u[m]||a;return r?n.createElement(b,i(i({ref:t},p),{},{components:r})):n.createElement(b,i({ref:t},p))}));function b(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=r.length,i=new Array(a);i[0]=m;var c={};for(var s in t)hasOwnProperty.call(t,s)&&(c[s]=t[s]);c.originalType=e,c[d]="string"==typeof e?e:o,i[1]=c;for(var l=2;l<a;l++)i[l]=r[l];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}m.displayName="MDXCreateElement"},51:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>u,frontMatter:()=>a,metadata:()=>c,toc:()=>l});var n=r(7462),o=(r(7294),r(3905));const a={},i="Macro Library",c={unversionedId:"macro-library/index",id:"macro-library/index",title:"Macro Library",description:"Scriban-based and C#-based macros allow us to do a lot of things that would otherwise only be possible as compiler extensions.",source:"@site/docs/macro-library/index.md",sourceDirName:"macro-library",slug:"/macro-library/",permalink:"/ExtendedCS/docs/macro-library/",draft:!1,editUrl:"https://github.com/distris/ExtendedCS/tree/main/docs/macro-library/index.md",tags:[],version:"current",frontMatter:{},sidebar:"docsSidebar",previous:{title:"C# Compilation Process",permalink:"/ExtendedCS/docs/capabilities/macros/csharp-compilation-process"},next:{title:"TODO: Singleton",permalink:"/ExtendedCS/docs/macro-library/singleton"}},s={},l=[],p={toc:l},d="wrapper";function u(e){let{components:t,...r}=e;return(0,o.kt)(d,(0,n.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"macro-library"},"Macro Library"),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"/ExtendedCS/docs/capabilities/macros/scriban-based/"},"Scriban-based")," and ",(0,o.kt)("a",{parentName:"p",href:"/ExtendedCS/docs/capabilities/macros/csharp-based/"},"C#-based")," macros allow us to do a lot of things that would otherwise only be possible as compiler extensions."),(0,o.kt)("p",null,"Thus the compiler comes with an open-source library of various macros that you can use."),(0,o.kt)("p",null,"Our ultimate goal is to move as much functionality from the compiler to the macro APIs as possible. This allows for end-users like you or us to easily extend or modify the provided functionality."),(0,o.kt)("p",null,"For example, ",(0,o.kt)("a",{parentName:"p",href:"/ExtendedCS/docs/macro-library/singleton"},(0,o.kt)("inlineCode",{parentName:"a"},"[Singleton]"))," was once a built-in compiler extension, until we added the necessary APIs that allowed it to be implemented via a ",(0,o.kt)("a",{parentName:"p",href:"/ExtendedCS/docs/capabilities/macros/csharp-based/"},"C#-based macro"),"."),(0,o.kt)("p",null,"As a consequence, now it is quite easy to modify the ",(0,o.kt)("inlineCode",{parentName:"p"},"[Singleton]")," macro if it does not suit your needs perfectly, producing ",(0,o.kt)("inlineCode",{parentName:"p"},"[OurSingleton]")," that does exactly what you need."))}u.isMDXComponent=!0}}]);