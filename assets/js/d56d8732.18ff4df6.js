"use strict";(self.webpackChunkcsharp_extended_compiler=self.webpackChunkcsharp_extended_compiler||[]).push([[2360],{3905:(e,t,r)=>{r.d(t,{Zo:()=>l,kt:()=>y});var n=r(7294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function a(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function c(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var p=n.createContext({}),d=function(e){var t=n.useContext(p),r=t;return e&&(r="function"==typeof e?e(t):a(a({},t),e)),r},l=function(e){var t=d(e.components);return n.createElement(p.Provider,{value:t},e.children)},s="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,i=e.originalType,p=e.parentName,l=c(e,["components","mdxType","originalType","parentName"]),s=d(r),m=o,y=s["".concat(p,".").concat(m)]||s[m]||u[m]||i;return r?n.createElement(y,a(a({ref:t},l),{},{components:r})):n.createElement(y,a({ref:t},l))}));function y(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=r.length,a=new Array(i);a[0]=m;var c={};for(var p in t)hasOwnProperty.call(t,p)&&(c[p]=t[p]);c.originalType=e,c[s]="string"==typeof e?e:o,a[1]=c;for(var d=2;d<i;d++)a[d]=r[d];return n.createElement.apply(null,a)}return n.createElement.apply(null,r)}m.displayName="MDXCreateElement"},393:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>p,contentTitle:()=>a,default:()=>u,frontMatter:()=>i,metadata:()=>c,toc:()=>d});var n=r(7462),o=(r(7294),r(3905));const i={sidebar_position:1},a="RecordType",c={unversionedId:"capabilities/record/record-type",id:"capabilities/record/record-type",title:"RecordType",description:"Currently if the type that is included in the record is generated by the compiler (for example, from a macro), the compiler will not be able to compile such a record without us providing additional information.",source:"@site/docs/capabilities/record/record-type.md",sourceDirName:"capabilities/record",slug:"/capabilities/record/record-type",permalink:"/ExtendedCS/docs/capabilities/record/record-type",draft:!1,editUrl:"https://github.com/distris/ExtendedCS/tree/main/docs/capabilities/record/record-type.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"docsSidebar",previous:{title:"Record",permalink:"/ExtendedCS/docs/capabilities/record/"},next:{title:"GenConstructor",permalink:"/ExtendedCS/docs/capabilities/gen-constructor"}},p={},d=[],l={toc:d},s="wrapper";function u(e){let{components:t,...r}=e;return(0,o.kt)(s,(0,n.Z)({},l,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"recordtype"},"RecordType"),(0,o.kt)("p",null,"Currently if the type that is included in the ",(0,o.kt)("a",{parentName:"p",href:"/ExtendedCS/docs/capabilities/record/"},"record")," is generated by the compiler (for example, ",(0,o.kt)("a",{parentName:"p",href:"/ExtendedCS/docs/macros/"},"from a macro"),"), the compiler will not be able to compile such a record without us providing additional information."),(0,o.kt)("p",null,"We can do that by annotating the field with the ",(0,o.kt)("inlineCode",{parentName:"p"},"[RecordType]")," attribute."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cs"},"using GenerationAttributes;\n\n[Record] public partial class MyRecord {\n  // `GeneratedEnum` is an `enum` type.\n  [RecordType(RecordFieldType.Enum)]\n  public readonly GeneratedEnum foo;\n\n  // `GeneratedStruct` is a `struct` type.\n  [RecordType(RecordFieldType.Struct)]\n  public readonly GeneratedStruct bar;\n\n  // `GeneratedClass` is a `class` (reference) type.\n  [RecordType(RecordFieldType.Reference)]\n  public readonly GeneratedClass baz;\n}\n")),(0,o.kt)("admonition",{type:"note"},(0,o.kt)("p",{parentName:"admonition"},"This is a current limitation of the compiler and, in the future, it should be possible to compute this while compiling."),(0,o.kt)("p",{parentName:"admonition"},"However, it is not trivial to do so, so this is the solution for now.")))}u.isMDXComponent=!0}}]);