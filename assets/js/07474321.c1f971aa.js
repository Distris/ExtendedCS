"use strict";(self.webpackChunkcsharp_extended_compiler=self.webpackChunkcsharp_extended_compiler||[]).push([[8262],{3905:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>f});var a=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var p=a.createContext({}),l=function(e){var n=a.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},c=function(e){var n=l(e.components);return a.createElement(p.Provider,{value:n},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},d=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,i=e.originalType,p=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),u=l(t),d=r,f=u["".concat(p,".").concat(d)]||u[d]||m[d]||i;return t?a.createElement(f,o(o({ref:n},c),{},{components:t})):a.createElement(f,o({ref:n},c))}));function f(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var i=t.length,o=new Array(i);o[0]=d;var s={};for(var p in n)hasOwnProperty.call(n,p)&&(s[p]=n[p]);s.originalType=e,s[u]="string"==typeof e?e:r,o[1]=s;for(var l=2;l<i;l++)o[l]=t[l];return a.createElement.apply(null,o)}return a.createElement.apply(null,t)}d.displayName="MDXCreateElement"},2524:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>p,contentTitle:()=>o,default:()=>m,frontMatter:()=>i,metadata:()=>s,toc:()=>l});var a=t(7462),r=(t(7294),t(3905));const i={sidebar_position:2},o="ExpressionMacro",s={unversionedId:"capabilities/macros/attribute-based/expression-macro",id:"capabilities/macros/attribute-based/expression-macro",title:"ExpressionMacro",description:"[ExpressionMacro] is an attribute that allows you to replace the invocation of a function with a specified body that returns an expression.",source:"@site/docs/capabilities/macros/attribute-based/expression-macro.md",sourceDirName:"capabilities/macros/attribute-based",slug:"/capabilities/macros/attribute-based/expression-macro",permalink:"/ExtendedCS/docs/capabilities/macros/attribute-based/expression-macro",draft:!1,editUrl:"https://github.com/distris/ExtendedCS/tree/main/docs/capabilities/macros/attribute-based/expression-macro.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"docsSidebar",previous:{title:"MacroException",permalink:"/ExtendedCS/docs/capabilities/macros/attribute-based/macro-exception"},next:{title:"StatementMacro",permalink:"/ExtendedCS/docs/capabilities/macros/attribute-based/statement-macro"}},p={},l=[{value:"Syntax",id:"syntax",level:2},{value:"Parameters",id:"parameters",level:3},{value:"Functions",id:"functions",level:3},{value:"Use Cases",id:"use-cases",level:2}],c={toc:l},u="wrapper";function m(e){let{components:n,...t}=e;return(0,r.kt)(u,(0,a.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"expressionmacro"},"ExpressionMacro"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"[ExpressionMacro]")," is an attribute that allows you to replace the invocation of a function with a specified body that returns an expression."),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"An expression is any section of the code that evaluates to a value, such as ",(0,r.kt)("inlineCode",{parentName:"p"},"3"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"a + b + c"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"computeValue()")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"condition ? ifTrue() : ifFalse()"),".")),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"This only supports bodies that are expressions. If you need to have statement bodies, use ",(0,r.kt)("a",{parentName:"p",href:"/ExtendedCS/docs/capabilities/macros/attribute-based/statement-macro"},(0,r.kt)("inlineCode",{parentName:"a"},"[StatementMacro]"))," instead.")),(0,r.kt)("p",null,"For example, if we define such macro function:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cs"},'using GenerationAttributes;\n\npublic static class AnyExts {\n  /// <summary>Returns "expression=evaluated expression" string.</summary>\n  [ExpressionMacro(@"(""{{a}}="" + ({{a}}))")]\n  public static string echo<A>(this A a) => throw new MacroException();\n}\n')),(0,r.kt)("p",null,"Then this code:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cs"},'var error = $"No such {index.echo()}. {list.Count.echo()}";\n')),(0,r.kt)("p",null,"Will be compiled to:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cs"},'var error = $"No such {("index=" + (index))}. {("list.Count=" + list.Count)}";\n')),(0,r.kt)("p",null,"Which is equivalent to:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cs"},'var error = $"No such index={index}. list.Count={list.Count}";\n')),(0,r.kt)("h2",{id:"syntax"},"Syntax"),(0,r.kt)("p",null,"The pattern for ",(0,r.kt)("inlineCode",{parentName:"p"},"ExpressionMacro")," is evaluated with ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/scriban/scriban"},"scriban")," templating language."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cs"},'[ExpressionMacro("scriban goes here")]\n')),(0,r.kt)("h3",{id:"parameters"},"Parameters"),(0,r.kt)("p",null,"These parameters (accessible via the ",(0,r.kt)("inlineCode",{parentName:"p"},"{{ parameter }}")," syntax) are exported to the template:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"argumentName")," - refers to function argument named ",(0,r.kt)("inlineCode",{parentName:"p"},"argumentName"),"."),(0,r.kt)("p",{parentName:"li"},"For example this type signature has two parameters, accessible as ",(0,r.kt)("inlineCode",{parentName:"p"},"{{ dict }}")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"{{ key }}")," respectively:"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-cs"},"public static V getOrThrowM<K, V>(this IReadOnlyDictionary<K, V> dict, K key)\n"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"uniqueId")," - unique identifier for this macro call, can be used as a temporary variable name:"),(0,r.kt)("p",{parentName:"li"},"For example:"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-cs"},'[ExpressionMacro(@"\n  {{ dict }}.TryGetValue({{ key }}, out var {{ uniqueId }})\n    ? {{ uniqueId }}\n    : throw new System.Exception(""Can not find "" + {{ key }} + "" in the dictionary."")\n")]\npublic static V getOrThrowM<K, V>(this IReadOnlyDictionary<K, V> dict, K key) => \n  throw new MacroException();\n'))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"returnType")," - resolved return type of the invoked method."),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-cs"},'[ExpressionMacro(@"({{ a }}, ""The type of this method is {{ returnType }}."")")]\nstatic (A, string) identify<A>(A a) => throw new MacroException();\n\nvar tpl = identify(5);\n')),(0,r.kt)("p",{parentName:"li"},"Compiles to:"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-cs"},'var tpl = (5, "The type of this method is (int, string).");\n'))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"genericX")," - resolved generic type of a generic argument named ",(0,r.kt)("inlineCode",{parentName:"p"},"X"),"."),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-cs"},'[ExpressionMacro(@"({{ a }}, ""The type of {{ a  }} is {{ genericA }}."")")]\nstatic (A, string) identify<A>(A a) => throw new MacroException();\n\nvar tpl = identify(5);\n')),(0,r.kt)("p",{parentName:"li"},"Compiles to:"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-cs"},'var tpl = (5, "The type of 5 is int.");\n')))),(0,r.kt)("h3",{id:"functions"},"Functions"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"inline(string functionName, string[] args...)")," - inlines a lamba function from the argument named ",(0,r.kt)("inlineCode",{parentName:"p"},"functionName"),"."),(0,r.kt)("p",{parentName:"li"},"Example:"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-cs"},'[ExpressionMacro(\n  @"(({{opt}}).valueOut(out var {{uniqueId}}) ? ({{inline \'ifSome\' uniqueId}}) : ({{inline \'ifNone\'}}))"\n)]\npublic static void foldM<A, R>(\n  this Option<A> opt, Func<R> ifNone, Func<A, R> ifSome\n) => throw new MacroException();\n\npublic class Example {\n  public int test(Option<int> opt) => opt.foldM(\n    ifNone: () => {\n      Console.WriteLine("Warning, no value!");\n      Console.Beep();\n      return -1;\n    },\n    ifSome: value => {\n      Console.WriteLine("Received a value!");\n      Console.WriteLine(value);\n      return value;\n    }\n  );\n}\n')),(0,r.kt)("p",{parentName:"li"},"Compiles to:"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-cs"},'public class Example {\n  public int test(Option<int> opt) {\n    return ((opt).valueOut(out var id_373_660) \n      ? (_LOCAL_ifSome_527_653(id_373_660)) \n      : (_LOCAL_ifNone_399_510()));\n\n    int _LOCAL_ifNone_399_510() {\n      Console.WriteLine("Warning, no value!");\n      Console.Beep();\n      return -1;\n    }\n\n    int _LOCAL_ifSome_527_653(int value) {\n      Console.WriteLine("Received a value!");\n      Console.WriteLine(value);\n      return value;\n    }\n  }\n}\n')))),(0,r.kt)("h2",{id:"use-cases"},"Use Cases"),(0,r.kt)("p",null,"Expression macros are incredibly useful in:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Reducing boilerplace: often used pieces of code can be encoded as macro functions."),(0,r.kt)("p",{parentName:"li"},"Some examples:"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-cs"},'/// <summary>\n/// Allows you to write `Ref.refMacro(RenderTexture.active)` instead of\n/// `Ref.a(() => RenderTexture.active, v => RenderTexture.active = v)`.\n/// </summary>\n[ExpressionMacro("Ref.a(() => ${a}, v => ${a} = v)")]\npublic static Ref<A> refMacro<A>(A a) => throw new MacroException();\n\n/// <summary>\n/// Uses a macro to capture an address of the given parameter.\n/// <para/>\n/// Equivalent to <![CDATA[ `PtrOf.a(&value)` ]]>. \n/// </summary>\n[ExpressionMacro(@"PtrOf.a(&${a})")]\npublic static PtrOf<A> toPtrOf<A>(this A a) where A : unmanaged => \n  throw new MacroException();\n\n/// <summary>\n/// Returns <see cref="ArgumentOutOfRangeException"/> that references a given value.\n/// </summary>\n/// <example><code><![CDATA[\n/// var type = stringValue switch {\n///   "Steve" => ..., \n///   "Bob" => ..., \n///   _ => throw stringValue.argumentOutOfRange()\n/// };\n/// ]]></code></example>\n[ExpressionMacro(\n  @"new System.ArgumentOutOfRangeException(""${a}"", ${a}, ""unknown value"")"\n)]\npublic static ArgumentOutOfRangeException argumentOutOfRange<A>(this A a) => \nthrow new MacroException();\n'))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Giving new language capabilities to C#."),(0,r.kt)("p",{parentName:"li"},"For example, C# does not support extension methods on pointers, however we can do this:"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-cs"},'struct Inventory { \n  // This requires a pointer.\n  public static WeaponStatePtr inHandsInner(Inventory* inventory) {\n    ...\n  }\n\n  /// <summary>\n  /// This function only works if <see cref="Inventory"/> is a pointer.\n  /// </summary>\n  [ExpressionMacro(@"Inventory." + nameof(inHandsInner) + "(&${this})")]\n  public WeaponStatePtr inHandsPtr() => throw new MacroException();\n}\n')),(0,r.kt)("p",{parentName:"li"},"And then you can invoke it:"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-cs"},"var weaponStatePtr = c->CharacterEF->inventory.inHandsPtr()\n"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Providing great developer experience while retaining performance of imperative code."),(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"inline")," allows us to have nice anonymous-function based APIs which are then compiled down to imperative code and the cost of closure allocation and virtual delegate dispatch are eliminated.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Inlining performance-sensitive code with ",(0,r.kt)("inlineCode",{parentName:"p"},"inline"),"."),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-cs"},'/// <summary>\n/// Code copied from <see cref="FrameBase.TryFindAsset{T}(Quantum.AssetGuid,out T)"/>, \n/// inlined with a macro for maximum performance. Note that <see cref="id"/> must be \n/// an already resolved value, as it is inlined.\n/// </summary>\n/// <returns>Will return `null` if the asset is not found.</returns>\n[ExpressionMacro(\n  @"({{ id }}.IsDynamic \n    ? _dynamicAssetDB.FindAsset({{ id }}) \n    : Context.AssetDB.FindAsset({{ id }}, mainThread: true))"\n)]\nstatic AssetObject findOrNull(AssetGuid id) => throw new MacroException();\n')))))}m.isMDXComponent=!0}}]);