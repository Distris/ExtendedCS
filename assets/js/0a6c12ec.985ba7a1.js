"use strict";(self.webpackChunkcsharp_extended_compiler=self.webpackChunkcsharp_extended_compiler||[]).push([[4672],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>y});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var o=a.createContext({}),u=function(e){var t=a.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},c=function(e){var t=u(e.components);return a.createElement(o.Provider,{value:t},e.children)},m="mdxType",s={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,o=e.parentName,c=p(e,["components","mdxType","originalType","parentName"]),m=u(n),d=r,y=m["".concat(o,".").concat(d)]||m[d]||s[d]||i;return n?a.createElement(y,l(l({ref:t},c),{},{components:n})):a.createElement(y,l({ref:t},c))}));function y(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,l=new Array(i);l[0]=d;var p={};for(var o in t)hasOwnProperty.call(t,o)&&(p[o]=t[o]);p.originalType=e,p[m]="string"==typeof e?e:r,l[1]=p;for(var u=2;u<i;u++)l[u]=n[u];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},9706:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>l,default:()=>s,frontMatter:()=>i,metadata:()=>p,toc:()=>u});var a=n(7462),r=(n(7294),n(3905));const i={},l="EnumUnion",p={unversionedId:"macro-library/general/enum-union",id:"macro-library/general/enum-union",title:"EnumUnion",description:"Usable on: struct, class",source:"@site/docs/macro-library/general/enum-union.md",sourceDirName:"macro-library/general",slug:"/macro-library/general/enum-union",permalink:"/docs/macro-library/general/enum-union",draft:!1,editUrl:"https://github.com/distris/ExtendedCS/tree/main/docs/macro-library/general/enum-union.md",tags:[],version:"current",frontMatter:{},sidebar:"docsSidebar",previous:{title:"EmptyTypeEquality",permalink:"/docs/macro-library/general/empty-type-equality"},next:{title:"ExtractXMLDocIntoConst",permalink:"/docs/macro-library/general/extract-xml-doc-into-const"}},o={},u=[{value:"Example",id:"example",level:4},{value:"Parameters",id:"parameters",level:2},{value:"<code>name</code>",id:"name",level:3},{value:"<code>accessibilityModifier</code>",id:"accessibilitymodifier",level:3}],c={toc:u},m="wrapper";function s(e){let{components:t,...n}=e;return(0,r.kt)(m,(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"enumunion"},"EnumUnion"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Usable on"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"struct"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"class")),(0,r.kt)("p",null,"Creates a union from the enums that you specify in ",(0,r.kt)("inlineCode",{parentName:"p"},"toMerge"),"."),(0,r.kt)("p",null,"The types of the enums must match and the cases must not have same values."),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"Because enums can't be ",(0,r.kt)("inlineCode",{parentName:"p"},"partial")," in C# we must attach this attribute onto a ",(0,r.kt)("inlineCode",{parentName:"p"},"struct")," or a ",(0,r.kt)("inlineCode",{parentName:"p"},"class")," and an ",(0,r.kt)("inlineCode",{parentName:"p"},"enum")," is generated inside that.")),(0,r.kt)("h4",{id:"example"},"Example"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cs"},"public enum BuildRegularType { \n  Development = 0, Stage = 1, Production = 2\n}\npublic enum BuildSpecialType {\n  MapEditor = 100\n}\n\n[EnumUnion(toMerge: new[] { typeof(BuildRegularType), typeof(BuildSpecialType) })]\npublic static partial class BuildType {}\n")),(0,r.kt)("p",null,"This will generate:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Enum ",(0,r.kt)("inlineCode",{parentName:"p"},"BuildType.Value")," that will have ",(0,r.kt)("inlineCode",{parentName:"p"},"Development"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"Stage"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"Production"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"MapEditor")," cases.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Extension methods ",(0,r.kt)("inlineCode",{parentName:"p"},"toBuildType")," that can convert ",(0,r.kt)("inlineCode",{parentName:"p"},"BuildRegularType")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"BuildSpecialType")," to ",(0,r.kt)("inlineCode",{parentName:"p"},"BuildType.Value"),".")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Extension methods ",(0,r.kt)("inlineCode",{parentName:"p"},"toBuildRegularType")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"toBuildSpecialType")," that can convert the ",(0,r.kt)("inlineCode",{parentName:"p"},"BuildType.Value")," to ",(0,r.kt)("inlineCode",{parentName:"p"},"BuildRegularType?")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"BuildSpecialType?")," respectively.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"An inlined ",(0,r.kt)("inlineCode",{parentName:"p"},"foldM")," extension method:"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-cs"},"R foldM<R>(\n  this BuildType.Value value, \n  Func<BuildRegularType, R> onBuildRegularType,\n  Func<BuildSpecialType, R> onBuildSpecialType\n)\n")))),(0,r.kt)("h2",{id:"parameters"},"Parameters"),(0,r.kt)("h3",{id:"name"},(0,r.kt)("inlineCode",{parentName:"h3"},"name")),(0,r.kt)("p",null,"Specifies the name of the generated union enum."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Default:")," ",(0,r.kt)("inlineCode",{parentName:"p"},"Value")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cs"},'[EnumUnion(\n  name: "MergedEnum",\n  toMerge: new[] { typeof(BuildRegularType), typeof(BuildSpecialType) }\n)]\npublic static partial class BuildType {}\n')),(0,r.kt)("h3",{id:"accessibilitymodifier"},(0,r.kt)("inlineCode",{parentName:"h3"},"accessibilityModifier")),(0,r.kt)("p",null,"If specified changes the accessibility of the generated enum. "),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Default:")," same accessibility as the type that the attribute is attached to."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cs"},'[EnumUnion(\n  accessibilityModifier: "protected",\n  toMerge: new[] { typeof(BuildRegularType), typeof(BuildSpecialType) }\n)]\npublic static partial class BuildType {}\n')))}s.isMDXComponent=!0}}]);