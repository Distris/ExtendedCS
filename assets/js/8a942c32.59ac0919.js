"use strict";(self.webpackChunkcsharp_extended_compiler=self.webpackChunkcsharp_extended_compiler||[]).push([[4493],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>k});var a=n(7294);function l(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){l(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,a,l=function(e,t){if(null==e)return{};var n,a,l={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(l[n]=e[n]);return l}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(l[n]=e[n])}return l}var o=a.createContext({}),s=function(e){var t=a.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=s(e.components);return a.createElement(o.Provider,{value:t},e.children)},d="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var n=e.components,l=e.mdxType,r=e.originalType,o=e.parentName,u=p(e,["components","mdxType","originalType","parentName"]),d=s(n),c=l,k=d["".concat(o,".").concat(c)]||d[c]||m[c]||r;return n?a.createElement(k,i(i({ref:t},u),{},{components:n})):a.createElement(k,i({ref:t},u))}));function k(e,t){var n=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var r=n.length,i=new Array(r);i[0]=c;var p={};for(var o in t)hasOwnProperty.call(t,o)&&(p[o]=t[o]);p.originalType=e,p[d]="string"==typeof e?e:l,i[1]=p;for(var s=2;s<r;s++)i[s]=n[s];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}c.displayName="MDXCreateElement"},4755:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>i,default:()=>m,frontMatter:()=>r,metadata:()=>p,toc:()=>s});var a=n(7462),l=(n(7294),n(3905));const r={},i="Scriban-Based Macros",p={unversionedId:"macros/scriban-based/index",id:"macros/scriban-based/index",title:"Scriban-Based Macros",description:"You can write your own logic using the scriban template engine with [AttributeMacro].",source:"@site/docs/macros/scriban-based/index.md",sourceDirName:"macros/scriban-based",slug:"/macros/scriban-based/",permalink:"/docs/macros/scriban-based/",draft:!1,editUrl:"https://github.com/distris/ExtendedCS/tree/main/docs/macros/scriban-based/index.md",tags:[],version:"current",frontMatter:{},sidebar:"docsSidebar",previous:{title:"Use Cases",permalink:"/docs/macros/attribute-based/use-cases"},next:{title:"One-Off Macros",permalink:"/docs/macros/scriban-based/one-off-macros"}},o={},s=[{value:"Scriban",id:"scriban",level:2},{value:"Examples",id:"examples",level:2},{value:"Parameters",id:"parameters",level:2},{value:"type",id:"type",level:3},{value:"fieldName",id:"fieldname",level:3},{value:"Field Parameters",id:"field-parameters",level:2},{value:"field",id:"field",level:3},{value:"Property Parameters",id:"property-parameters",level:2},{value:"property",id:"property",level:3},{value:"Field or Property Parameters",id:"field-or-property-parameters",level:2},{value:"field_or_prop",id:"field_or_prop",level:3},{value:"Types",id:"types",level:2},{value:"EnumValue",id:"enumvalue",level:3},{value:"Field",id:"field-1",level:3},{value:"FieldOrProp",id:"fieldorprop",level:3},{value:"Method",id:"method",level:3},{value:"Parameter",id:"parameter",level:3},{value:"Property",id:"property-1",level:3},{value:"Type",id:"type-1",level:3},{value:"TypeParameter",id:"typeparameter",level:3},{value:"Functions",id:"functions",level:2},{value:"Case Changing Functions",id:"case-changing-functions",level:3},{value:"add_extensions",id:"add_extensions",level:3},{value:"add_interface",id:"add_interface",level:3},{value:"add_using",id:"add_using",level:3},{value:"create_field_or_prop",id:"create_field_or_prop",level:3},{value:"fdqn_last",id:"fdqn_last",level:3},{value:"find_type",id:"find_type",level:3},{value:"generate_record_members",id:"generate_record_members",level:3},{value:"is_var_defined",id:"is_var_defined",level:3},{value:"rename_as_public_accessor",id:"rename_as_public_accessor",level:3},{value:"throw",id:"throw",level:3},{value:"type_arguments",id:"type_arguments",level:3},{value:"type_enum_value",id:"type_enum_value",level:3},{value:"type_enum_values",id:"type_enum_values",level:3},{value:"type_get_all_fields",id:"type_get_all_fields",level:3},{value:"type_get_all_methods",id:"type_get_all_methods",level:3},{value:"type_get_all_properties",id:"type_get_all_properties",level:3},{value:"type_get_descendants_in_assembly",id:"type_get_descendants_in_assembly",level:3},{value:"type_get_field",id:"type_get_field",level:3},{value:"type_get_full_metadata_name",id:"type_get_full_metadata_name",level:3},{value:"type_get_property",id:"type_get_property",level:3},{value:"type_get_record_members",id:"type_get_record_members",level:3},{value:"type_reduced_name",id:"type_reduced_name",level:3}],u={toc:s},d="wrapper";function m(e){let{components:t,...n}=e;return(0,l.kt)(d,(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"scriban-based-macros"},"Scriban-Based Macros"),(0,l.kt)("p",null,"You can write your own logic using the ",(0,l.kt)("a",{parentName:"p",href:"https://github.com/scriban/scriban"},"scriban template engine")," with ",(0,l.kt)("inlineCode",{parentName:"p"},"[AttributeMacro]"),"."),(0,l.kt)("p",null,"Add this ",(0,l.kt)("inlineCode",{parentName:"p"},"[AttributeMacro]")," attribute on your own custom attribute:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cs"},'using System;\nusing GenerationAttributes;\n\n[AttributeMacro(@"\n  scriban code goes here\n")]\npublic class MyAttribute : Attribute {}\n')),(0,l.kt)("p",null,"Then your custom attribute (",(0,l.kt)("inlineCode",{parentName:"p"},"[MyAttribute]")," in this case) will generate new type members or extension methods when used on a type definition (class, struct or enum)."),(0,l.kt)("h2",{id:"scriban"},"Scriban"),(0,l.kt)("p",null,"Scriban is a templating language, similar to PHP."),(0,l.kt)("p",null,"Reference links to the most useful documentation:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"https://github.com/scriban/scriban/blob/master/doc/language.md"},"Language description")," ","\u2014"," describes how blocks, control statements, comments, templating works."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"https://github.com/scriban/scriban/blob/master/doc/builtins.md"},"Built-in functions")," ","\u2014"," a comprehensive list of built-in functions available for you.")),(0,l.kt)("h2",{id:"examples"},"Examples"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cs",metastring:'title="Example of a field macro"',title:'"Example',of:!0,a:!0,field:!0,'macro"':!0},'using System;\nusing GenerationAttributes;\n\n[\n  AttributeMacro(@"\n/// <summary>\n/// <para>Sets the <see cref=""{{ field.name }}""/> value.</para>\n/// </summary>\npublic {{ \nif field.is_static \n  \'static\' \nend \n}} void EDITOR_set{{ field.name | rename | pascal_case }}(\n  {{ field.type | type_reduced_name }} value\n) => {{ field.name }} = value;\n  "), \n  AttributeUsage(AttributeTargets.Field)\n]\npublic class EditorSetterAttribute : Attribute {}\n\nclass MyCharacterData {\n  [SerializeField, EditorSetter] CharacterRole _type;\n}\n')),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cs true",metastring:'title="Example of a class macro"',title:'"Example',of:!0,a:!0,'macro"':!0},'using System;\nusing GenerationAttributes;\n\n[\n  AttributeMacro(@"\npublic static TimeSpan {{ ourMethodBaseName }}(this short v) => \n  TimeSpan.{{ timeSpanMethodName }}(v);\npublic static TimeSpan {{ ourMethodBaseName }}(this ushort v) => \n  TimeSpan.{{ timeSpanMethodName }}(v);\npublic static TimeSpan {{ ourMethodBaseName }}(this int v) => \n  TimeSpan.{{ timeSpanMethodName }}(v);\npublic static TimeSpan {{ ourMethodBaseName }}(this uint v) => \n  TimeSpan.{{ timeSpanMethodName }}(v);\npublic static TimeSpan {{ ourMethodBaseName }}(this long v) => \n  TimeSpan.{{ timeSpanMethodName }}(v);\npublic static TimeSpan {{ ourMethodBaseName }}(this ulong v) => \n  TimeSpan.{{ timeSpanMethodName }}(v);\npublic static TimeSpan {{ ourMethodBaseName }}(this float v) => \n  TimeSpan.{{ timeSpanMethodName }}(v);\npublic static TimeSpan {{ ourMethodBaseName }}(this double v) => \n  TimeSpan.{{ timeSpanMethodName }}(v);\n\npublic static TimeSpan {{ ourMethodBaseName }}s(this short v) => \n  TimeSpan.{{ timeSpanMethodName }}(v);\npublic static TimeSpan {{ ourMethodBaseName }}s(this ushort v) => \n  TimeSpan.{{ timeSpanMethodName }}(v);\npublic static TimeSpan {{ ourMethodBaseName }}s(this int v) => \n  TimeSpan.{{ timeSpanMethodName }}(v);\npublic static TimeSpan {{ ourMethodBaseName }}s(this uint v) => \n  TimeSpan.{{ timeSpanMethodName }}(v);\npublic static TimeSpan {{ ourMethodBaseName }}s(this long v) => \n  TimeSpan.{{ timeSpanMethodName }}(v);\npublic static TimeSpan {{ ourMethodBaseName }}s(this ulong v) => \n  TimeSpan.{{ timeSpanMethodName }}(v);\npublic static TimeSpan {{ ourMethodBaseName }}s(this float v) => \n  TimeSpan.{{ timeSpanMethodName }}(v);\npublic static TimeSpan {{ ourMethodBaseName }}s(this double v) => \n  TimeSpan.{{ timeSpanMethodName }}(v);\n  "),\n  AttributeUsage(AttributeTargets.Class, AllowMultiple = true)\n]\nclass GenTimeSpanHelpersAttribute : Attribute {\n  /// <summary>Name of our extension, like \'milli\'.</summary>\n  public string ourMethodBaseName;\n    \n  /// <summary>Name on <see cref="TimeSpan"/>, like \'FromMilliseconds\'.</summary>\n  public string timeSpanMethodName;\n}\n\n[\n  GenTimeSpanHelpers(\n    ourMethodBaseName = "milli", \n    timeSpanMethodName = nameof(TimeSpan.FromMilliseconds)\n  ),\n  GenTimeSpanHelpers(\n    ourMethodBaseName = "second", \n    timeSpanMethodName = nameof(TimeSpan.FromSeconds)\n  ),\n  GenTimeSpanHelpers(\n    ourMethodBaseName = "minute", \n    timeSpanMethodName = nameof(TimeSpan.FromMinutes)\n  ),\n  GenTimeSpanHelpers(\n    ourMethodBaseName = "hour", \n    timeSpanMethodName = nameof(TimeSpan.FromHours)\n  ),\n  GenTimeSpanHelpers(\n    ourMethodBaseName = "day", \n    timeSpanMethodName = nameof(TimeSpan.FromDays)\n  ),\n] \npublic static partial class TimeSpanExts {}\n')),(0,l.kt)("h2",{id:"parameters"},"Parameters"),(0,l.kt)("p",null,"These parameters are always exposed to the scriban template:"),(0,l.kt)("h3",{id:"type"},"type"),(0,l.kt)("p",null,"The current type of class/struct/enum or the containing type if your attribute is attached to a field or a property."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Parameter type:")," ",(0,l.kt)("a",{parentName:"p",href:"#type-1"},"Type")),(0,l.kt)("h3",{id:"fieldname"},"fieldName"),(0,l.kt)("p",null,"Refers to a field value of field ",(0,l.kt)("inlineCode",{parentName:"p"},"fieldName")," on your custom attribute."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Parameter type:")," mapped from the C# type using the following mapping."),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"C# type"),(0,l.kt)("th",{parentName:"tr",align:null},"Scriban Type"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"bool")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"https://github.com/scriban/scriban/blob/master/doc/language.md#33-boolean"},"boolean"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"string")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"https://github.com/scriban/scriban/blob/master/doc/language.md#31-strings"},"string"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"numeric types (",(0,l.kt)("inlineCode",{parentName:"td"},"int"),", ",(0,l.kt)("inlineCode",{parentName:"td"},"uint"),", etc.)"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"https://github.com/scriban/scriban/blob/master/doc/language.md#32-numbers"},"number"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"arrays (",(0,l.kt)("inlineCode",{parentName:"td"},"string[]"),", ",(0,l.kt)("inlineCode",{parentName:"td"},"int[]"),", etc.)"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"https://github.com/scriban/scriban/blob/master/doc/language.md#6-arrays"},"array"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"System.Type")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"#type-1"},"Type"))))),(0,l.kt)("p",null,"For example:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cs"},'[AttributeMacro(@"\n{{\n  # Note that by default the parameters are undefined.\n  if !is_var_defined \'ParameterName\'\n    throw \'Please define a value for parameter ""ParameterName""\'\n  end\n}}\n\npublic void newMethod(string {{ ParameterName }}) {\n  System.Console.WriteLine($""Hi from {ParameterName}!"");\n}\n")]\npublic class MyAttribute : Attribute {\n  public string ParameterName;\n}\n')),(0,l.kt)("h2",{id:"field-parameters"},"Field Parameters"),(0,l.kt)("p",null,"These parameters are only exposed if an attribute is added to a field:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cs"},"[MyScribanMacro] public int MyField;\n")),(0,l.kt)("h3",{id:"field"},"field"),(0,l.kt)("p",null,"The field that this macro is attached to. In the example case this would be the ",(0,l.kt)("inlineCode",{parentName:"p"},"int MyField")," field."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Parameter type:")," ",(0,l.kt)("a",{parentName:"p",href:"#field-1"},"Field")),(0,l.kt)("h2",{id:"property-parameters"},"Property Parameters"),(0,l.kt)("p",null,"These parameters are only exposed if an attribute is added to a property:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cs"},"[MyScribanMacro] public int MyProperty { get; set; }\n")),(0,l.kt)("h3",{id:"property"},"property"),(0,l.kt)("p",null,"The property that this macro is attached to. In the example case this would be the ",(0,l.kt)("inlineCode",{parentName:"p"},"int MyProperty")," property."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Parameter type:")," ",(0,l.kt)("a",{parentName:"p",href:"#property-1"},"Property")),(0,l.kt)("h2",{id:"field-or-property-parameters"},"Field or Property Parameters"),(0,l.kt)("p",null,"These parameters are exposed if an attribute is added to a field or property:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cs"},"[MyScribanMacro] public int MyField;\n[MyScribanMacro] public int MyProperty { get; set; }\n")),(0,l.kt)("p",null,"They make writing templates which work on both fields and properties easier to write."),(0,l.kt)("h3",{id:"field_or_prop"},"field_or_prop"),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Parameter type:")," ",(0,l.kt)("a",{parentName:"p",href:"#field-1"},(0,l.kt)("inlineCode",{parentName:"a"},"Field"))," or ",(0,l.kt)("a",{parentName:"p",href:"#property-1"},(0,l.kt)("inlineCode",{parentName:"a"},"Property")),"."),(0,l.kt)("p",null,"The respective data from either a ",(0,l.kt)("a",{parentName:"p",href:"#field"},(0,l.kt)("inlineCode",{parentName:"a"},"field"))," or ",(0,l.kt)("a",{parentName:"p",href:"#property"},(0,l.kt)("inlineCode",{parentName:"a"},"property"))," parameters."),(0,l.kt)("h2",{id:"types"},"Types"),(0,l.kt)("p",null,"In addition to built-in scriban types, the compiler defines additional types."),(0,l.kt)("h3",{id:"enumvalue"},"EnumValue"),(0,l.kt)("p",null,"One of the defined cases in an ",(0,l.kt)("inlineCode",{parentName:"p"},"enum MyEnum { Case1, Case2 }")," declaration."),(0,l.kt)("p",null,"It has these properties exposed to scriban:"),(0,l.kt)("table",null,(0,l.kt)("thead",null,(0,l.kt)("tr",null,(0,l.kt)("th",null,"Name"),(0,l.kt)("th",null,"Type"),(0,l.kt)("th",null,"Description"))),(0,l.kt)("tr",null,(0,l.kt)("td",null,"name"),(0,l.kt)("td",null,"string"),(0,l.kt)("td",null,"The fully qualified enum value name, for example ",(0,l.kt)("code",null,"global::MyNamespace.MyEnum.Case1"),".")),(0,l.kt)("tr",null,(0,l.kt)("td",null,"short_name"),(0,l.kt)("td",null,"string"),(0,l.kt)("td",null,"The case name without the namespace and enum name, for example ",(0,l.kt)("code",null,"Case1"),".")),(0,l.kt)("tr",null,(0,l.kt)("td",null,"value"),(0,l.kt)("td",null,"object"),(0,l.kt)("td",null,"Value assigned to this enum member, usually an ",(0,l.kt)("code",null,"int"),". Also see information about ",(0,l.kt)("a",{href:"#underlying_enum_type"},"underlying enum types"),"."))),(0,l.kt)("h3",{id:"field-1"},"Field"),(0,l.kt)("p",null,"The ",(0,l.kt)("inlineCode",{parentName:"p"},"Field")," type has these properties exposed to scriban:"),(0,l.kt)("table",null,(0,l.kt)("thead",null,(0,l.kt)("tr",null,(0,l.kt)("th",null,"Name"),(0,l.kt)("th",null,"Type"),(0,l.kt)("th",null,"Description"))),(0,l.kt)("tr",null,(0,l.kt)("td",null,"name"),(0,l.kt)("td",null,"string"),(0,l.kt)("td",null,"The name of the field in C#, for example ",(0,l.kt)("code",null,"MyField")," for ",(0,l.kt)("code",null,"string MyField;"))),(0,l.kt)("tr",null,(0,l.kt)("td",null,"type"),(0,l.kt)("td",null,(0,l.kt)("a",{href:"#type-1"},"Type")),(0,l.kt)("td",null,"The type of the field in C#, for example ",(0,l.kt)("code",null,"string")," for ",(0,l.kt)("code",null,"string MyField;"))),(0,l.kt)("tr",null,(0,l.kt)("td",null,"is_read_only"),(0,l.kt)("td",null,"boolean"),(0,l.kt)("td",null,"true if this is a readonly field, such as ",(0,l.kt)("code",null,"readonly string MyField;"))),(0,l.kt)("tr",null,(0,l.kt)("td",null,"is_const"),(0,l.kt)("td",null,"boolean"),(0,l.kt)("td",null,"true if this is a constant field, such as ",(0,l.kt)("code",null,'const string MY_CONSTANT = "value";'))),(0,l.kt)("tr",null,(0,l.kt)("td",null,"constant_value"),(0,l.kt)("td",null,"object?"),(0,l.kt)("td",null,"Constant value that we get from compiler API. Available for constant fields. For example, for ",(0,l.kt)("code",null,'const string MY_CONSTANT = "value";')," this would be ",(0,l.kt)("code",null,'"value"'),".")),(0,l.kt)("tr",null,(0,l.kt)("td",null,"is_property"),(0,l.kt)("td",null,"boolean"),(0,l.kt)("td",null,"Whether this is a property. Always ",(0,l.kt)("code",null,"false"),".")),(0,l.kt)("tr",null,(0,l.kt)("td",null,"is_field"),(0,l.kt)("td",null,"boolean"),(0,l.kt)("td",null,"Whether this is a field. Always ",(0,l.kt)("code",null,"true"),".")),(0,l.kt)("tr",null,(0,l.kt)("td",null,"is_method"),(0,l.kt)("td",null,"boolean"),(0,l.kt)("td",null,"Whether this is a method. Always ",(0,l.kt)("code",null,"false"),".")),(0,l.kt)("tr",null,(0,l.kt)("td",null,"is_static"),(0,l.kt)("td",null,"boolean"),(0,l.kt)("td",null,"Whether this is a static field, like ",(0,l.kt)("code",null,"static int MyField;"))),(0,l.kt)("tr",null,(0,l.kt)("td",null,"is_private"),(0,l.kt)("td",null,"boolean"),(0,l.kt)("td",null,"Whether this is a private field, like ",(0,l.kt)("code",null,"private int MyField;"))),(0,l.kt)("tr",null,(0,l.kt)("td",null,"is_protected"),(0,l.kt)("td",null,"boolean"),(0,l.kt)("td",null,"Whether this is a protected field, like ",(0,l.kt)("code",null,"protected int MyField;"))),(0,l.kt)("tr",null,(0,l.kt)("td",null,"is_internal"),(0,l.kt)("td",null,"boolean"),(0,l.kt)("td",null,"Whether this is an internal field, like ",(0,l.kt)("code",null,"internal int MyField;"))),(0,l.kt)("tr",null,(0,l.kt)("td",null,"is_public"),(0,l.kt)("td",null,"boolean"),(0,l.kt)("td",null,"Whether this is a public field, like ",(0,l.kt)("code",null,"public int MyField;"))),(0,l.kt)("tr",null,(0,l.kt)("td",null,"visibility_modifier"),(0,l.kt)("td",null,"string"),(0,l.kt)("td",null,"One of ",(0,l.kt)("code",null,"public"),", ",(0,l.kt)("code",null,"private"),", ",(0,l.kt)("code",null,"protected"),", ",(0,l.kt)("code",null,"internal")," or ",(0,l.kt)("code",null,"protected internal"),".")),(0,l.kt)("tr",null,(0,l.kt)("td",null,"is_abstract"),(0,l.kt)("td",null,"boolean"),(0,l.kt)("td",null,"As fields cannot be abstract in C# this is always ",(0,l.kt)("code",null,"false"),".")),(0,l.kt)("tr",null,(0,l.kt)("td",null,"is_virtual"),(0,l.kt)("td",null,"boolean"),(0,l.kt)("td",null,"As fields cannot be virtual in C# this is always ",(0,l.kt)("code",null,"false"),"."))),(0,l.kt)("h3",{id:"fieldorprop"},"FieldOrProp"),(0,l.kt)("p",null,"An internal structure for the compiler, obtainable from ",(0,l.kt)("a",{parentName:"p",href:"#create_field_or_prop"},(0,l.kt)("inlineCode",{parentName:"a"},"create_field_or_prop"))," function, useable in ",(0,l.kt)("a",{parentName:"p",href:"#generate_record_members"},(0,l.kt)("inlineCode",{parentName:"a"},"generate_record_members"))," function."),(0,l.kt)("h3",{id:"method"},"Method"),(0,l.kt)("p",null,"The ",(0,l.kt)("inlineCode",{parentName:"p"},"Method")," type has these properties exposed to scriban:"),(0,l.kt)("table",null,(0,l.kt)("thead",null,(0,l.kt)("tr",null,(0,l.kt)("th",null,"Name"),(0,l.kt)("th",null,"Type"),(0,l.kt)("th",null,"Description"))),(0,l.kt)("tr",null,(0,l.kt)("td",null,"name"),(0,l.kt)("td",null,"string"),(0,l.kt)("td",null,"The name of the the method in C#, for example ",(0,l.kt)("code",null,"ComputeName")," for ",(0,l.kt)("code",null,"string ComputeName();"))),(0,l.kt)("tr",null,(0,l.kt)("td",null,"return_type"),(0,l.kt)("td",null,(0,l.kt)("a",{href:"#type-1"},"Type")),(0,l.kt)("td",null,"The return type of the method in C#, for example ",(0,l.kt)("code",null,"string")," for ",(0,l.kt)("code",null,"string ComputeName();"))),(0,l.kt)("tr",null,(0,l.kt)("td",null,"is_read_only"),(0,l.kt)("td",null,"boolean"),(0,l.kt)("td",null,"Indicates whether the method is readonly, i.e. whether the 'this' receiver parameter is 'ref readonly'.",(0,l.kt)("p",null),"Returns true for readonly instance methods and accessors and for reduced extension methods with a 'this in' parameter.")),(0,l.kt)("tr",null,(0,l.kt)("td",null,"parameters"),(0,l.kt)("td",null,(0,l.kt)("a",{href:"#parameter"},(0,l.kt)("code",null,"Parameter[]"))),(0,l.kt)("td",null,"Array of C# parameters provided to this method.")),(0,l.kt)("tr",null,(0,l.kt)("td",null,"type_parameters"),(0,l.kt)("td",null,(0,l.kt)("a",{href:"#type-parameter"},(0,l.kt)("code",null,"TypeParameter[]"))),(0,l.kt)("td",null,"Array of C# type parameters provided to this generic method. If the method is non-generic, this is empty.")),(0,l.kt)("tr",null,(0,l.kt)("td",null,"is_property"),(0,l.kt)("td",null,"boolean"),(0,l.kt)("td",null,"Whether this is a property. Always ",(0,l.kt)("code",null,"false"),".")),(0,l.kt)("tr",null,(0,l.kt)("td",null,"is_field"),(0,l.kt)("td",null,"boolean"),(0,l.kt)("td",null,"Whether this is a field. Always ",(0,l.kt)("code",null,"false"),".")),(0,l.kt)("tr",null,(0,l.kt)("td",null,"is_method"),(0,l.kt)("td",null,"boolean"),(0,l.kt)("td",null,"Whether this is a method. Always ",(0,l.kt)("code",null,"true"),".")),(0,l.kt)("tr",null,(0,l.kt)("td",null,"is_static"),(0,l.kt)("td",null,"boolean"),(0,l.kt)("td",null,"Whether this is a static method, like ",(0,l.kt)("code",null,"static int CalculateAge();"))),(0,l.kt)("tr",null,(0,l.kt)("td",null,"is_private"),(0,l.kt)("td",null,"boolean"),(0,l.kt)("td",null,"Whether this is a static method, like ",(0,l.kt)("code",null,"private int CalculateAge();"))),(0,l.kt)("tr",null,(0,l.kt)("td",null,"is_protected"),(0,l.kt)("td",null,"boolean"),(0,l.kt)("td",null,"Whether this is a protected method, like ",(0,l.kt)("code",null,"protected int CalculateAge();"))),(0,l.kt)("tr",null,(0,l.kt)("td",null,"is_internal"),(0,l.kt)("td",null,"boolean"),(0,l.kt)("td",null,"Whether this is an internal method, like ",(0,l.kt)("code",null,"internal int CalculateAge();"))),(0,l.kt)("tr",null,(0,l.kt)("td",null,"is_public"),(0,l.kt)("td",null,"boolean"),(0,l.kt)("td",null,"Whether this is a public method, like ",(0,l.kt)("code",null,"public int CalculateAge();"))),(0,l.kt)("tr",null,(0,l.kt)("td",null,"visibility_modifier"),(0,l.kt)("td",null,"string"),(0,l.kt)("td",null,"One of ",(0,l.kt)("code",null,"public"),", ",(0,l.kt)("code",null,"private"),", ",(0,l.kt)("code",null,"protected"),", ",(0,l.kt)("code",null,"internal")," or ",(0,l.kt)("code",null,"protected internal"),".")),(0,l.kt)("tr",null,(0,l.kt)("td",null,"is_abstract"),(0,l.kt)("td",null,"boolean"),(0,l.kt)("td",null,"True if this is an abstract method, such as ",(0,l.kt)("code",null,"abstract int CalculateAge();"))),(0,l.kt)("tr",null,(0,l.kt)("td",null,"is_virtual"),(0,l.kt)("td",null,"boolean"),(0,l.kt)("td",null,"True if this is an virtual method, such as ",(0,l.kt)("code",null,"public virtual int CalculateAge();")))),(0,l.kt)("h3",{id:"parameter"},"Parameter"),(0,l.kt)("p",null,"Parameter provided to an ",(0,l.kt)("a",{href:"https://learn.microsoft.com/en-us/dotnet/csharp/programming-guide/indexers/"},"indexer property")," (see ",(0,l.kt)("a",{parentName:"p",href:"#property-indexer-parameters"},(0,l.kt)("inlineCode",{parentName:"a"},"parameters")," on ",(0,l.kt)("inlineCode",{parentName:"a"},"Property")),") or a regular ",(0,l.kt)("a",{parentName:"p",href:"#method"},(0,l.kt)("inlineCode",{parentName:"a"},"Method")),"."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cs",metastring:'title="Example of an indexer property"',title:'"Example',of:!0,an:!0,indexer:!0,'property"':!0},"class SampleCollection<T> {\n  // Declare an array to store the data elements.\n  private T[] arr = new T[100];\n\n  // Define the indexer to allow client code to use [] notation.\n  public T this[int idx] {\n    get { return arr[idx]; }\n    set { arr[idx] = value; }\n  }\n}\n")),(0,l.kt)("p",null,"It has these properties exposed to scriban:"),(0,l.kt)("table",null,(0,l.kt)("thead",null,(0,l.kt)("tr",null,(0,l.kt)("th",null,"Name"),(0,l.kt)("th",null,"Type"),(0,l.kt)("th",null,"Description"))),(0,l.kt)("tr",null,(0,l.kt)("td",null,"name"),(0,l.kt)("td",null,"string"),(0,l.kt)("td",null,"The name of the parameter, for example ",(0,l.kt)("code",null,"idx"),".")),(0,l.kt)("tr",null,(0,l.kt)("td",null,"type"),(0,l.kt)("td",null,(0,l.kt)("a",{href:"#type-1"},"Type")),(0,l.kt)("td",null,"The type of the parameter, for example ",(0,l.kt)("code",null,"int"),"."))),(0,l.kt)("h3",{id:"property-1"},"Property"),(0,l.kt)("p",null,"The ",(0,l.kt)("inlineCode",{parentName:"p"},"Property")," type has these properties exposed to scriban:"),(0,l.kt)("table",null,(0,l.kt)("thead",null,(0,l.kt)("tr",null,(0,l.kt)("th",null,"Name"),(0,l.kt)("th",null,"Type"),(0,l.kt)("th",null,"Description"))),(0,l.kt)("tr",null,(0,l.kt)("td",null,"name"),(0,l.kt)("td",null,"string"),(0,l.kt)("td",null,"The name of the property in C#, for example ",(0,l.kt)("code",null,"MyProp")," for ",(0,l.kt)("code",null,"string MyProp { get; set; }"))),(0,l.kt)("tr",null,(0,l.kt)("td",null,"type"),(0,l.kt)("td",null,(0,l.kt)("a",{href:"#type-1"},"Type")),(0,l.kt)("td",null,"The type of the property in C#, for example ",(0,l.kt)("code",null,"string")," for ",(0,l.kt)("code",null,"string MyProp { get; set; }"))),(0,l.kt)("tr",null,(0,l.kt)("td",null,"is_read_only"),(0,l.kt)("td",null,"boolean"),(0,l.kt)("td",null,"Whether the property can only be read, for example ",(0,l.kt)("code",null,"string MyProp { get; }"))),(0,l.kt)("tr",null,(0,l.kt)("td",null,"is_write_only"),(0,l.kt)("td",null,"boolean"),(0,l.kt)("td",null,"Whether the property can only be written, for example ",(0,l.kt)("code",null,"string MyProp { set; }"))),(0,l.kt)("tr",null,(0,l.kt)("td",null,"has_getter"),(0,l.kt)("td",null,"boolean"),(0,l.kt)("td",null,"Whether the property has the ",(0,l.kt)("code",null,"get;")," part, for example ",(0,l.kt)("code",null,"string MyProp { get; }")," or ",(0,l.kt)("code",null,"string MyProp { get; set; }"))),(0,l.kt)("tr",null,(0,l.kt)("td",null,"has_setter"),(0,l.kt)("td",null,"boolean"),(0,l.kt)("td",null,"Whether the property has the ",(0,l.kt)("code",null,"set;")," part, for example ",(0,l.kt)("code",null,"string MyProp { set; }")," or ",(0,l.kt)("code",null,"string MyProp { get; set; }"))),(0,l.kt)("tr",null,(0,l.kt)("td",{id:"property-indexer-parameters"},"parameters"),(0,l.kt)("td",null,(0,l.kt)("a",{href:"#parameter"},(0,l.kt)("code",null,"Parameter[]"))),(0,l.kt)("td",null,"If this property is an ",(0,l.kt)("a",{href:"https://learn.microsoft.com/en-us/dotnet/csharp/programming-guide/indexers/"},"indexer")," (such as ",(0,l.kt)("code",null,"int this[string key1, string key2] => ...;"),"), this returns an array of the parameters provided to the indexer.")),(0,l.kt)("tr",null,(0,l.kt)("td",null,"is_property"),(0,l.kt)("td",null,"boolean"),(0,l.kt)("td",null,"Whether this is a property. Always ",(0,l.kt)("code",null,"true"),".")),(0,l.kt)("tr",null,(0,l.kt)("td",null,"is_field"),(0,l.kt)("td",null,"boolean"),(0,l.kt)("td",null,"Whether this is a field. Always ",(0,l.kt)("code",null,"false"),".")),(0,l.kt)("tr",null,(0,l.kt)("td",null,"is_method"),(0,l.kt)("td",null,"boolean"),(0,l.kt)("td",null,"Whether this is a method. Always ",(0,l.kt)("code",null,"false"),".")),(0,l.kt)("tr",null,(0,l.kt)("td",null,"is_static"),(0,l.kt)("td",null,"boolean"),(0,l.kt)("td",null,"Whether this is a static property, like ",(0,l.kt)("code",null,"static int MyProp { get; set; }"))),(0,l.kt)("tr",null,(0,l.kt)("td",null,"is_private"),(0,l.kt)("td",null,"boolean"),(0,l.kt)("td",null,"Whether this is a static property, like ",(0,l.kt)("code",null,"private int MyProp { get; set; }"))),(0,l.kt)("tr",null,(0,l.kt)("td",null,"is_protected"),(0,l.kt)("td",null,"boolean"),(0,l.kt)("td",null,"Whether this is a protected property, like ",(0,l.kt)("code",null,"protected int MyProp { get; set; }"))),(0,l.kt)("tr",null,(0,l.kt)("td",null,"is_internal"),(0,l.kt)("td",null,"boolean"),(0,l.kt)("td",null,"Whether this is an internal property, like ",(0,l.kt)("code",null,"internal int MyProp { get; set; }"))),(0,l.kt)("tr",null,(0,l.kt)("td",null,"is_public"),(0,l.kt)("td",null,"boolean"),(0,l.kt)("td",null,"Whether this is a public property, like ",(0,l.kt)("code",null,"public int MyProp { get; set; }"))),(0,l.kt)("tr",null,(0,l.kt)("td",null,"visibility_modifier"),(0,l.kt)("td",null,"string"),(0,l.kt)("td",null,"One of ",(0,l.kt)("code",null,"public"),", ",(0,l.kt)("code",null,"private"),", ",(0,l.kt)("code",null,"protected"),", ",(0,l.kt)("code",null,"internal")," or ",(0,l.kt)("code",null,"protected internal"),".")),(0,l.kt)("tr",null,(0,l.kt)("td",null,"is_abstract"),(0,l.kt)("td",null,"boolean"),(0,l.kt)("td",null,"True if this is an abstract property, such as ",(0,l.kt)("code",null,"abstract int MyProp { get; set; }"))),(0,l.kt)("tr",null,(0,l.kt)("td",null,"is_virtual"),(0,l.kt)("td",null,"boolean"),(0,l.kt)("td",null,"True if this is an virtual property, such as ",(0,l.kt)("code",null,"public virtual int MyProp { get; set; }")))),(0,l.kt)("h3",{id:"type-1"},"Type"),(0,l.kt)("p",null,"The ",(0,l.kt)("inlineCode",{parentName:"p"},"Type")," type has these properties exposed to scriban:"),(0,l.kt)("table",null,(0,l.kt)("thead",null,(0,l.kt)("tr",null,(0,l.kt)("th",null,"Name"),(0,l.kt)("th",null,"Type"),(0,l.kt)("th",null,"Description"))),(0,l.kt)("tr",null,(0,l.kt)("td",{id:"type-name"},"name"),(0,l.kt)("td",null,"string"),(0,l.kt)("td",null,"The fully qualified type name, for example ",(0,l.kt)("code",null,"global::System.Collections.Generic.List<int>"),".")),(0,l.kt)("tr",null,(0,l.kt)("td",null,"short_name"),(0,l.kt)("td",null,"string"),(0,l.kt)("td",null,"The type name without the namespace and generic parameters, for example ",(0,l.kt)("code",null,"List"),".")),(0,l.kt)("tr",null,(0,l.kt)("td",null,"visibility_modifier"),(0,l.kt)("td",null,"string"),(0,l.kt)("td",null,"One of ",(0,l.kt)("code",null,"public"),", ",(0,l.kt)("code",null,"private"),", ",(0,l.kt)("code",null,"protected"),", ",(0,l.kt)("code",null,"internal")," or ",(0,l.kt)("code",null,"protected internal"),".")),(0,l.kt)("tr",null,(0,l.kt)("td",{id:"underlying_enum_type"},"underlying_enum_type"),(0,l.kt)("td",null,(0,l.kt)("code",null,(0,l.kt)("a",{href:"#type-1"},"Type?"))),(0,l.kt)("td",null,"If this ",(0,l.kt)("code",null,"Type")," is an ",(0,l.kt)("code",null,"enum"),", then this will have the underlying type of that ",(0,l.kt)("code",null,"enum"),".",(0,l.kt)("p",null),"For example, ",(0,l.kt)("code",null,"enum MyEnum : byte { Case1, Case2 }")," has an underlying type of ",(0,l.kt)("code",null,"byte"),".",(0,l.kt)("p",null),(0,l.kt)("a",{href:"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/language-specification/enums#192-enum-declarations"},(0,l.kt)("code",null,"enum"),"s that do not have an underlying type specified explicitly will use ",(0,l.kt)("code",null,"int")," as its underlying type"),"."))),(0,l.kt)("h3",{id:"typeparameter"},"TypeParameter"),(0,l.kt)("p",null,"A type parameter provided to a generic ",(0,l.kt)("a",{parentName:"p",href:"#method"},(0,l.kt)("inlineCode",{parentName:"a"},"Method")),"."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cs",metastring:'title="Example of a generic method"',title:'"Example',of:!0,a:!0,generic:!0,'method"':!0},"TDispatcher DoDispatch<TDispatcher, TEvent>(\n  TDispatcher dispatcher, Action<TEvent> onEvent\n)\n  where TDispatcher : IDispatcher\n{\n  // ...\n}\n")),(0,l.kt)("p",null,"It has these properties exposed to scriban:"),(0,l.kt)("table",null,(0,l.kt)("thead",null,(0,l.kt)("tr",null,(0,l.kt)("th",null,"Name"),(0,l.kt)("th",null,"Type"),(0,l.kt)("th",null,"Description"))),(0,l.kt)("tr",null,(0,l.kt)("td",null,"name"),(0,l.kt)("td",null,"string"),(0,l.kt)("td",null,"The name of the generic parameter, for example ",(0,l.kt)("code",null,"TDispatcher")," or ",(0,l.kt)("code",null,"TEvent"),".")),(0,l.kt)("tr",null,(0,l.kt)("td",null,"additional_constraint"),(0,l.kt)("td",null,"string?"),(0,l.kt)("td",null,"Indicates whether the generic parameter has any of these constraints:",(0,l.kt)("ul",null,(0,l.kt)("li",null,(0,l.kt)("code",null,"struct")," \u2014 for example in ",(0,l.kt)("code",null,"where TEvent : struct")),(0,l.kt)("li",null,(0,l.kt)("code",null,"class")," \u2014 for example in ",(0,l.kt)("code",null,"where TEvent : class")),(0,l.kt)("li",null,(0,l.kt)("code",null,"unmanaged")," \u2014 for example in ",(0,l.kt)("code",null,"where TEvent : unmanaged")),(0,l.kt)("li",null,(0,l.kt)("code",null,"null")," otherwise")))),(0,l.kt)("tr",null,(0,l.kt)("td",null,"has_constructor_constraint"),(0,l.kt)("td",null,"boolean"),(0,l.kt)("td",null,(0,l.kt)("code",null,"true")," if the generic parameter has the ",(0,l.kt)("code",null,"where TEvent : new()")," constaint.")),(0,l.kt)("tr",null,(0,l.kt)("td",null,"constraint_types"),(0,l.kt)("td",null,(0,l.kt)("a",{href:"#type-1"},"Type[]")),(0,l.kt)("td",null,"Array of types that constrain this generic parameter, for example ",(0,l.kt)("code",null,"where TEvent : IReadable, IWritable"),"."))),(0,l.kt)("h2",{id:"functions"},"Functions"),(0,l.kt)("p",null,"In addition to the ",(0,l.kt)("a",{parentName:"p",href:"https://github.com/scriban/scriban/blob/master/doc/builtins.md"},"built-in functions")," we additionally add these functions to scriban templates."),(0,l.kt)("h3",{id:"case-changing-functions"},"Case Changing Functions"),(0,l.kt)("p",null,"These functions from ",(0,l.kt)("a",{parentName:"p",href:"https://github.com/soltys/Soltys.ChangeCase"},"Soltys.ChangeCase")," library are exposed to the scriban template."),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"https://github.com/soltys/Soltys.ChangeCase#sentencecase"},(0,l.kt)("inlineCode",{parentName:"a"},'string sentence_case(string input, string replacement = " ")'))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"https://github.com/soltys/Soltys.ChangeCase#camelcase"},(0,l.kt)("inlineCode",{parentName:"a"},"string camel_case(string input)"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"https://github.com/soltys/Soltys.ChangeCase#pascalcase"},(0,l.kt)("inlineCode",{parentName:"a"},"string pascal_case(string input)"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"https://github.com/soltys/Soltys.ChangeCase#uppercasefirst"},(0,l.kt)("inlineCode",{parentName:"a"},"string upper_case_first(string input)"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"https://github.com/soltys/Soltys.ChangeCase#paramcase"},(0,l.kt)("inlineCode",{parentName:"a"},"string param_case(string input)"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"https://github.com/soltys/Soltys.ChangeCase#dotcase"},(0,l.kt)("inlineCode",{parentName:"a"},"string dot_case(string input)"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"https://github.com/soltys/Soltys.ChangeCase#swapcase"},(0,l.kt)("inlineCode",{parentName:"a"},"string swap_case(string input)"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"https://github.com/soltys/Soltys.ChangeCase#titlecase"},(0,l.kt)("inlineCode",{parentName:"a"},"string title_case(string input)"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"https://github.com/soltys/Soltys.ChangeCase#snakecase"},(0,l.kt)("inlineCode",{parentName:"a"},"string snake_case(string input)"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"https://github.com/soltys/Soltys.ChangeCase#constantcase"},(0,l.kt)("inlineCode",{parentName:"a"},"string constant_case(string input)")))),(0,l.kt)("h3",{id:"add_extensions"},"add_extensions"),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Function Signature"),": ",(0,l.kt)("inlineCode",{parentName:"p"},"void add_extensions(string extensionsCode)")),(0,l.kt)("p",null,"Pass a string that contains extension methods, they will be parsed and added to a separate static class."),(0,l.kt)("p",null,"You can use ",(0,l.kt)("a",{parentName:"p",href:"https://github.com/scriban/scriban/blob/master/doc/language.md#96-capture-variable--end"},(0,l.kt)("inlineCode",{parentName:"a"},"capture")," feature of scriban engine to do that conveniently"),"."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-text",metastring:'title="Example"',title:'"Example"'},"{{ capture extensions }}\n  {{ exts_type_name = type.name }}\n\n  /// <summary>Converts a value to a single flag.</summary>\n  public static {{exts_type_name}}Flags toFlags(this {{exts_type_name}} v) =>\n    ({{exts_type_name}}Flags) (1{{shiftSuffix}} << (int) v);\n{{ end }}\n\n{{ add_extensions extensions }}\n")),(0,l.kt)("h3",{id:"add_interface"},"add_interface"),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Function Signature"),": ",(0,l.kt)("inlineCode",{parentName:"p"},"void add_interface(string interfaceName)")),(0,l.kt)("p",null,"Adds an interface to a generated partial class."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-text",metastring:'title="Example"',title:'"Example"'},"{{\n  add_interface 'IEquatable<' + (typeFor | type_reduced_name) + '>'\n}}\n")),(0,l.kt)("h3",{id:"add_using"},"add_using"),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Function Signature"),": ",(0,l.kt)("inlineCode",{parentName:"p"},"void add_using(string usingName)")),(0,l.kt)("p",null,"Adds ",(0,l.kt)("inlineCode",{parentName:"p"},"using X;")," C# directive to the generated file."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-text",metastring:'title="Example"',title:'"Example"'},"{{\n  add_using 'FPCSharpUnity.core.json'\n}}\n")),(0,l.kt)("h3",{id:"create_field_or_prop"},"create_field_or_prop"),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Function Signature"),": ",(0,l.kt)("code",null,(0,l.kt)("a",{parentName:"p",href:"#fieldorprop"},"FieldOrProp")," create_field_or_prop(",(0,l.kt)("a",{parentName:"p",href:"#type-1"},"Type")," type, string name)")),(0,l.kt)("p",null,"Creates a ",(0,l.kt)("a",{parentName:"p",href:"#fieldorprop"},"FieldOrProp")," data structure from a field or property with the name ",(0,l.kt)("inlineCode",{parentName:"p"},"name")," on a ",(0,l.kt)("inlineCode",{parentName:"p"},"type"),". This data structure can only be passed to ",(0,l.kt)("inlineCode",{parentName:"p"},"generate_record_members"),"(#generate_record_members) function."),(0,l.kt)("h3",{id:"fdqn_last"},"fdqn_last"),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Function Signature"),": ",(0,l.kt)("inlineCode",{parentName:"p"},"string fdqn_last(string identifier)")),(0,l.kt)("p",null,"Returns the string without the namespace and generic parameters."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-text",metastring:'title="Example"',title:'"Example"'},"{{\n  name = fdqn_last 'System.Collections.Generic.List<int>'\n  # name = 'List'\n}}\n")),(0,l.kt)("h3",{id:"find_type"},"find_type"),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Function Signature"),": ",(0,l.kt)("code",null,(0,l.kt)("a",{parentName:"p",href:"#type-1"},"Type?")," find_type(string fdqn, ",(0,l.kt)("a",{parentName:"p",href:"#type-1"},"Type?")," type_for_assembly = null)")),(0,l.kt)("p",null,"Tries to find a type in either a single assembly or whole compilation."),(0,l.kt)("p",null,"If ",(0,l.kt)("inlineCode",{parentName:"p"},"type_for_assembly")," is provided, the search is only conducted in that assembly, otherwise all available assemblies are searched."),(0,l.kt)("p",null,"You can use the ",(0,l.kt)("a",{parentName:"p",href:"#type_get_full_metadata_name"},(0,l.kt)("inlineCode",{parentName:"a"},"type_get_full_metadata_name"))," function to get the ",(0,l.kt)("inlineCode",{parentName:"p"},"fdqn")," that is suitable for this function."),(0,l.kt)("p",null,"Returns ",(0,l.kt)("inlineCode",{parentName:"p"},"null")," if not found."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-text",metastring:'title="Example"',title:'"Example"'},"{{\n  maybeAssetRefFromType = 'Quantum.' + assetRefFromName | find_type\n}}\n")),(0,l.kt)("h3",{id:"generate_record_members"},"generate_record_members"),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Function Signature"),": ",(0,l.kt)("code",null,"void generate_record_members(\n","\xa0","\xa0","(",(0,l.kt)("a",{parentName:"p",href:"#field-1"},"Field"),"|",(0,l.kt)("a",{parentName:"p",href:"#property-1"},"Property"),"|",(0,l.kt)("a",{parentName:"p",href:"#fieldorprop"},"FieldOrProp"),")[] fields_and_props,\n","\xa0","\xa0","boolean generate_comparer = true,\n","\xa0","\xa0","boolean generate_to_string = true,\n","\xa0","\xa0","boolean generate_get_hash_code = true,\n","\xa0","\xa0","boolean constructor_flags = GenerationAttributes.ConstructorFlags.Default,\n)")),(0,l.kt)("p",null,"Generates ",(0,l.kt)("a",{parentName:"p",href:"/docs/capabilities/record/"},"record")," members (constructors and other functions) on the current type for ",(0,l.kt)("inlineCode",{parentName:"p"},"fields_and_props")," that were given."),(0,l.kt)("h3",{id:"is_var_defined"},"is_var_defined"),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Function Signature"),": ",(0,l.kt)("code",null,"boolean is_var_defined(string variable)")),(0,l.kt)("p",null,"Returns whether a variable is defined in scriban template root scope."),(0,l.kt)("p",null,"This is very useful in dealing with default parameters in the attributes."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cs",metastring:'title="Example"',title:'"Example"'},"[AttributeMacro(@\"\n{{\n  if !is_var_defined 'isSomeName'\n    isSomeName = '__unsafeIsSome'\n  end\n\n  # ...\n}}\n\")]\npublic class NullableTAttribute : Attribute {\n  /// <summary>Name for the 'bool isSome' field. `__unsafeIsSome` by default.</summary>\n  public string isSomeName;\n\n  // ...\n}\n")),(0,l.kt)("h3",{id:"rename_as_public_accessor"},"rename_as_public_accessor"),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Function Signature"),": ",(0,l.kt)("inlineCode",{parentName:"p"},"string rename_as_public_accessor(string identifier)")),(0,l.kt)("p",null,"Renames the string according to ",(0,l.kt)("a",{parentName:"p",href:"/docs/capabilities/public-accessor"},(0,l.kt)("inlineCode",{parentName:"a"},"[PublicAccessor]"))," naming rules."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-text",metastring:'title="Example"',title:'"Example"'},"{{\n  public_name = rename_as_public_accessor '_MyField'\n  # public_name = 'MyField'\n}}\n")),(0,l.kt)("h3",{id:"throw"},"throw"),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Function Signature"),": ",(0,l.kt)("inlineCode",{parentName:"p"},"void throw(string message)")),(0,l.kt)("p",null,"Fails the code generation and passes the error message to the compiler output."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-text",metastring:'title="Example"',title:'"Example"'},"{{\n  if YourParameter > 6\n    throw 'YourParameter can not be more than 6, you provided ' + YourParameter + '!'\n  end\n}}\n")),(0,l.kt)("h3",{id:"type_arguments"},"type_arguments"),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Function Signature"),": ",(0,l.kt)("code",null,(0,l.kt)("a",{parentName:"p",href:"#type-1"},"Type[]")," type_arguments(",(0,l.kt)("a",{parentName:"p",href:"#type-1"},"Type")," type)")),(0,l.kt)("p",null,"Returns an array of generic arguments if they exist on this type."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-text",metastring:'title="Example"',title:'"Example"'},"{{\n  # type = typeof(System.Collection.Generic.List<int>)\n\n  type_args = type_arguments type\n  # type_args = [typeof(int)]\n}}\n")),(0,l.kt)("h3",{id:"type_enum_value"},"type_enum_value"),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Function Signature"),": ",(0,l.kt)("code",null,"object type_enum_value(",(0,l.kt)("a",{parentName:"p",href:"#type-1"},"Type")," type, string name)")),(0,l.kt)("p",null,"Gets the underlying constant value for the ",(0,l.kt)("inlineCode",{parentName:"p"},"enum")," case with the ",(0,l.kt)("inlineCode",{parentName:"p"},"name"),"."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-text",metastring:'title="Example"',title:'"Example"'},"{{\n  # Given the definition:\n  #   enum MyEnum { Case1 = 5, Case2 = 10 }\n  #\n  # type = typeof(MyEnum)\n\n  enum_value = type_enum_value type 'Case1'\n  # enum_value = 5\n}}\n")),(0,l.kt)("h3",{id:"type_enum_values"},"type_enum_values"),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Function Signature"),": ",(0,l.kt)("code",null,(0,l.kt)("a",{parentName:"p",href:"#enumvalue"},"EnumValue[]")," type_enum_values(",(0,l.kt)("a",{parentName:"p",href:"#type-1"},"Type")," type)")),(0,l.kt)("p",null,"Returns an array of ",(0,l.kt)("inlineCode",{parentName:"p"},"enum")," values. Only available if ",(0,l.kt)("inlineCode",{parentName:"p"},"type")," is an ",(0,l.kt)("inlineCode",{parentName:"p"},"enum")," type."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-text",metastring:'title="Example"',title:'"Example"'},"{{\n  # Given the definition:\n  #   enum MyEnum { Case1, Case2 }\n  #\n  # type = typeof(MyEnum)\n\n  enum_values = type_enum_values type\n  # enum_values = [EnumValue(MyEnum.Case1), EnumValue(MyEnum.Case2)]\n}}\n")),(0,l.kt)("h3",{id:"type_get_all_fields"},"type_get_all_fields"),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Function Signature"),": ",(0,l.kt)("code",null,(0,l.kt)("a",{parentName:"p",href:"#field-1"},"Field[]")," type_get_all_fields(\n","\xa0","\xa0",(0,l.kt)("a",{parentName:"p",href:"#type-1"},"Type")," type,\n","\xa0","\xa0","boolean public = true,\n","\xa0","\xa0","boolean private = true,\n","\xa0","\xa0","boolean protected = true,\n","\xa0","\xa0","boolean instance = true,\n","\xa0","\xa0","boolean static = false,\n","\xa0","\xa0","boolean const = false\n)")),(0,l.kt)("p",null,"Gets all fields of a Type. You can filter the list based on parameters."),(0,l.kt)("p",null,"Use the ",(0,l.kt)("a",{parentName:"p",href:"https://github.com/scriban/scriban/blob/master/doc/language.md#named-arguments"},"named arguments syntax")," to set up the filters."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-text",metastring:'title="Example"',title:'"Example"'},"{{\n  fields = type_get_all_fields my_type static:true\n}}\n")),(0,l.kt)("h3",{id:"type_get_all_methods"},"type_get_all_methods"),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Function Signature"),": ",(0,l.kt)("code",null,(0,l.kt)("a",{parentName:"p",href:"#method"},"Method[]")," type_get_all_methods(\n","\xa0","\xa0",(0,l.kt)("a",{parentName:"p",href:"#type-1"},"Type")," type,\n","\xa0","\xa0","boolean public = true,\n","\xa0","\xa0","boolean private = true,\n","\xa0","\xa0","boolean protected = true,\n","\xa0","\xa0","boolean instance = true,\n","\xa0","\xa0","boolean static = false,\n","\xa0","\xa0","// Whether to include methods from base types.\n","\xa0","\xa0","boolean include_base_types = false,\n","\xa0","\xa0","// Whether to include methods from the implemented interfaces.\n","\xa0","\xa0","boolean include_interfaces = false\n)")),(0,l.kt)("p",null,"Gets all methods of a Type. You can filter the list based on parameters."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-text",metastring:'title="Example"',title:'"Example"'},"{{\n  methods = type_get_all_methods my_type static:true\n}}\n")),(0,l.kt)("h3",{id:"type_get_all_properties"},"type_get_all_properties"),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Function Signature"),": ",(0,l.kt)("code",null,(0,l.kt)("a",{parentName:"p",href:"#property-1"},"Property[]")," type_get_all_properties(\n","\xa0","\xa0",(0,l.kt)("a",{parentName:"p",href:"#type-1"},"Type")," type,\n","\xa0","\xa0","boolean public = true,\n","\xa0","\xa0","boolean private = true,\n","\xa0","\xa0","boolean protected = true,\n","\xa0","\xa0","boolean instance = true,\n","\xa0","\xa0","boolean static = false,\n","\xa0","\xa0","// Whether to include methods from base types.\n","\xa0","\xa0","boolean include_base_types = false,\n","\xa0","\xa0","// Whether to include methods from the implemented interfaces.\n","\xa0","\xa0","boolean include_interfaces = false\n)")),(0,l.kt)("p",null,"Gets all properties of a Type. You can filter the list based on parameters."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-text",metastring:'title="Example"',title:'"Example"'},"{{\n  properties = type_get_all_properties my_type static:true\n}}\n")),(0,l.kt)("h3",{id:"type_get_descendants_in_assembly"},"type_get_descendants_in_assembly"),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Function Signature"),": ",(0,l.kt)("code",null,(0,l.kt)("a",{parentName:"p",href:"#type-1"},"Type[]")," type_get_descendants_in_assembly(",(0,l.kt)("a",{parentName:"p",href:"#type-1"},"Type")," type, ",(0,l.kt)("a",{parentName:"p",href:"#type-1"},"Type")," type_for_assembly = null, boolean collect_indirect_descendants = false)")),(0,l.kt)("p",null,"Gets all descendant types (types that extend the specified type) that are contained in a single assembly."),(0,l.kt)("p",null,"The assembly to check is taken from the ",(0,l.kt)("inlineCode",{parentName:"p"},"type_for_assembly")," parameter. If ",(0,l.kt)("inlineCode",{parentName:"p"},"type_for_assembly")," is not provided, then we take the assembly in which ",(0,l.kt)("inlineCode",{parentName:"p"},"type")," is defined."),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"strong"},"collect_indirect_descendants"))," - if ",(0,l.kt)("inlineCode",{parentName:"li"},"false"),", this function will only collect direct (Level 1) descendants.")),(0,l.kt)("admonition",{type:"note"},(0,l.kt)("p",{parentName:"admonition"},"This function is not optimized so do not call it often.")),(0,l.kt)("h3",{id:"type_get_field"},"type_get_field"),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Function Signature"),": ",(0,l.kt)("code",null,(0,l.kt)("a",{parentName:"p",href:"#field-1"},"Field")," type_get_field(",(0,l.kt)("a",{parentName:"p",href:"#type-1"},"Type")," type, string fieldName)")),(0,l.kt)("p",null,"Gets a field of a Type with a specified name."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-text",metastring:'title="Example"',title:'"Example"'},"{{\n  field = type_get_field my_type 'MyField'\n}}\n")),(0,l.kt)("h3",{id:"type_get_full_metadata_name"},"type_get_full_metadata_name"),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Function Signature"),": ",(0,l.kt)("code",null,"string type_get_full_metadata_name(",(0,l.kt)("a",{parentName:"p",href:"#type-1"},"Type")," type)")),(0,l.kt)("p",null,"Gets the full C# metadata name that can be used in the ",(0,l.kt)("a",{parentName:"p",href:"#find_type"},(0,l.kt)("inlineCode",{parentName:"a"},"find_type"))," function."),(0,l.kt)("p",null,"Implementation is taken from ",(0,l.kt)("a",{parentName:"p",href:"https://stackoverflow.com/a/27106959"},"this StackOverflow answer"),"."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-text",metastring:'title="Example"',title:'"Example"'},"{{\n  type_metadata_name = type_get_full_metadata_name my_type\n}}\n")),(0,l.kt)("h3",{id:"type_get_property"},"type_get_property"),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Function Signature"),": ",(0,l.kt)("code",null,(0,l.kt)("a",{parentName:"p",href:"#property"},"Property")," type_get_property(",(0,l.kt)("a",{parentName:"p",href:"#type-1"},"Type")," type, string propertyName)")),(0,l.kt)("p",null,"Gets a property of a Type with a specified name."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-text",metastring:'title="Example"',title:'"Example"'},"{{\n  field = type_get_property my_type 'MyProperty'\n}}\n")),(0,l.kt)("h3",{id:"type_get_record_members"},"type_get_record_members"),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Function Signature"),": ",(0,l.kt)("code",null,"{\n","\xa0","\xa0",'"all": (',(0,l.kt)("a",{parentName:"p",href:"#field-1"},"Field"),"|",(0,l.kt)("a",{parentName:"p",href:"#property-1"},"Property"),")[],\n","\xa0","\xa0",'"fields": ',(0,l.kt)("a",{parentName:"p",href:"#field-1"},"Field"),"[],\n","\xa0","\xa0",'"properties": ',(0,l.kt)("a",{parentName:"p",href:"#property-1"},"Property"),"[],\n} type_get_record_members(",(0,l.kt)("a",{parentName:"p",href:"#type-1"},"Type")," type)")),(0,l.kt)("p",null,"Returns an object with 3 properties (",(0,l.kt)("inlineCode",{parentName:"p"},"all"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"fields"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"properties"),") containing members of a ",(0,l.kt)("inlineCode",{parentName:"p"},"type")," retrieved using the same logic as a ",(0,l.kt)("a",{parentName:"p",href:"/docs/capabilities/record/"},(0,l.kt)("inlineCode",{parentName:"a"},"[Record]"))," would."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-text",metastring:'title="Example"',title:'"Example"'},"{{\n  for member in (type_get_record_members of_type).all\n    ...\n  end\n}}\n")),(0,l.kt)("h3",{id:"type_reduced_name"},"type_reduced_name"),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Function Signature"),": ",(0,l.kt)("code",null,"string type_reduced_name(",(0,l.kt)("a",{parentName:"p",href:"#type-1"},"Type")," type)")),(0,l.kt)("p",null,"Returns a shortened string representation of a ",(0,l.kt)("a",{parentName:"p",href:"#type-1"},"Type")," name that is usable in the generated code without clashing with other types."),(0,l.kt)("p",null,"This is very useful to make generated code more readable by replacing types like ",(0,l.kt)("inlineCode",{parentName:"p"},"global::MyNamespace.MyClass.MyInnerClass")," with just ",(0,l.kt)("inlineCode",{parentName:"p"},"MyClass.MyInnerclass"),"."),(0,l.kt)("p",null,"However, the substitution may not always be possible in the current context, then this just returns ",(0,l.kt)("a",{parentName:"p",href:"#type-name"},(0,l.kt)("inlineCode",{parentName:"a"},"Type.name")),"."))}m.isMDXComponent=!0}}]);