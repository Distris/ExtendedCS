"use strict";(self.webpackChunkcsharp_extended_compiler=self.webpackChunkcsharp_extended_compiler||[]).push([[3960],{3905:(e,t,r)=>{r.d(t,{Zo:()=>l,kt:()=>b});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var c=n.createContext({}),p=function(e){var t=n.useContext(c),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},l=function(e){var t=p(e.components);return n.createElement(c.Provider,{value:t},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,o=e.originalType,c=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),u=p(r),d=a,b=u["".concat(c,".").concat(d)]||u[d]||m[d]||o;return r?n.createElement(b,i(i({ref:t},l),{},{components:r})):n.createElement(b,i({ref:t},l))}));function b(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=r.length,i=new Array(o);i[0]=d;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s[u]="string"==typeof e?e:a,i[1]=s;for(var p=2;p<o;p++)i[p]=r[p];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},4402:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>m,frontMatter:()=>o,metadata:()=>s,toc:()=>p});var n=r(7462),a=(r(7294),r(3905));const o={sidebar_position:2},i="ExpressionMacro",s={unversionedId:"macros/attribute-based/expression-macro",id:"macros/attribute-based/expression-macro",title:"ExpressionMacro",description:"[ExpressionMacro] is an attribute that allows you to replace the invocation of a function with a specified body that returns an expression.",source:"@site/docs/macros/attribute-based/expression-macro.md",sourceDirName:"macros/attribute-based",slug:"/macros/attribute-based/expression-macro",permalink:"/docs/macros/attribute-based/expression-macro",draft:!1,editUrl:"https://github.com/distris/ExtendedCS/tree/main/docs/macros/attribute-based/expression-macro.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"docsSidebar",previous:{title:"MacroException",permalink:"/docs/macros/attribute-based/macro-exception"},next:{title:"StatementMacro",permalink:"/docs/macros/attribute-based/statement-macro"}},c={},p=[{value:"Syntax",id:"syntax",level:2}],l={toc:p},u="wrapper";function m(e){let{components:t,...r}=e;return(0,a.kt)(u,(0,n.Z)({},l,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"expressionmacro"},"ExpressionMacro"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"[ExpressionMacro]")," is an attribute that allows you to replace the invocation of a function with a specified body that returns an expression."),(0,a.kt)("admonition",{type:"note"},(0,a.kt)("p",{parentName:"admonition"},"An expression is any section of the code that evaluates to a value (that you can assign to a variable), such as ",(0,a.kt)("inlineCode",{parentName:"p"},"3"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"a + b + c"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"computeValue()")," or ",(0,a.kt)("inlineCode",{parentName:"p"},"condition ? ifTrue() : ifFalse()"),".")),(0,a.kt)("admonition",{type:"info"},(0,a.kt)("p",{parentName:"admonition"},"This only supports bodies that are expressions. If you need to have statement bodies, use ",(0,a.kt)("a",{parentName:"p",href:"/docs/macros/attribute-based/statement-macro"},(0,a.kt)("inlineCode",{parentName:"a"},"[StatementMacro]"))," instead.")),(0,a.kt)("p",null,"For example, if we define such macro function:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cs"},'using GenerationAttributes;\n\npublic static class AnyExts {\n  /// <summary>Returns "expression=evaluated expression" string.</summary>\n  [ExpressionMacro(@"(""{{a}}="" + ({{a}}))")]\n  public static string echo<A>(this A a) => throw new MacroException();\n}\n')),(0,a.kt)("p",null,"Then this code:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cs"},'var error = $"No such {index.echo()}. {list.Count.echo()}";\n')),(0,a.kt)("p",null,"Will be compiled to:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cs"},'var error = $"No such {("index=" + (index))}. {("list.Count=" + list.Count)}";\n')),(0,a.kt)("p",null,"Which is equivalent to:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cs"},'var error = $"No such index={index}. list.Count={list.Count}";\n')),(0,a.kt)("h2",{id:"syntax"},"Syntax"),(0,a.kt)("p",null,"The pattern for ",(0,a.kt)("inlineCode",{parentName:"p"},"ExpressionMacro")," is evaluated with ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/scriban/scriban"},"scriban")," templating language."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cs"},'[ExpressionMacro("scriban goes here")]\n')),(0,a.kt)("p",null,"See ",(0,a.kt)("a",{parentName:"p",href:"/docs/macros/attribute-based/parameters-and-functions"},"parameters and functions")," for additional information."))}m.isMDXComponent=!0}}]);