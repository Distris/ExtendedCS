"use strict";(self.webpackChunkcsharp_extended_compiler=self.webpackChunkcsharp_extended_compiler||[]).push([[4797],{3905:(e,t,i)=>{i.d(t,{Zo:()=>m,kt:()=>h});var n=i(7294);function r(e,t,i){return t in e?Object.defineProperty(e,t,{value:i,enumerable:!0,configurable:!0,writable:!0}):e[t]=i,e}function a(e,t){var i=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),i.push.apply(i,n)}return i}function l(e){for(var t=1;t<arguments.length;t++){var i=null!=arguments[t]?arguments[t]:{};t%2?a(Object(i),!0).forEach((function(t){r(e,t,i[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(i)):a(Object(i)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(i,t))}))}return e}function p(e,t){if(null==e)return{};var i,n,r=function(e,t){if(null==e)return{};var i,n,r={},a=Object.keys(e);for(n=0;n<a.length;n++)i=a[n],t.indexOf(i)>=0||(r[i]=e[i]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)i=a[n],t.indexOf(i)>=0||Object.prototype.propertyIsEnumerable.call(e,i)&&(r[i]=e[i])}return r}var o=n.createContext({}),c=function(e){var t=n.useContext(o),i=t;return e&&(i="function"==typeof e?e(t):l(l({},t),e)),i},m=function(e){var t=c(e.components);return n.createElement(o.Provider,{value:t},e.children)},s="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var i=e.components,r=e.mdxType,a=e.originalType,o=e.parentName,m=p(e,["components","mdxType","originalType","parentName"]),s=c(i),d=r,h=s["".concat(o,".").concat(d)]||s[d]||u[d]||a;return i?n.createElement(h,l(l({ref:t},m),{},{components:i})):n.createElement(h,l({ref:t},m))}));function h(e,t){var i=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=i.length,l=new Array(a);l[0]=d;var p={};for(var o in t)hasOwnProperty.call(t,o)&&(p[o]=t[o]);p.originalType=e,p[s]="string"==typeof e?e:r,l[1]=p;for(var c=2;c<a;c++)l[c]=i[c];return n.createElement.apply(null,l)}return n.createElement.apply(null,i)}d.displayName="MDXCreateElement"},5481:(e,t,i)=>{i.r(t),i.d(t,{assets:()=>o,contentTitle:()=>l,default:()=>u,frontMatter:()=>a,metadata:()=>p,toc:()=>c});var n=i(7462),r=(i(7294),i(3905));const a={sidebar_position:0},l="Implicits",p={unversionedId:"capabilities/implicits/index",id:"capabilities/implicits/index",title:"Implicits",description:"Implicits are a feature that we have ported from the Scala language. They are a way to resolve function parameter values without providing them explicitly.",source:"@site/docs/capabilities/implicits/index.md",sourceDirName:"capabilities/implicits",slug:"/capabilities/implicits/",permalink:"/ExtendedCS/docs/capabilities/implicits/",draft:!1,tags:[],version:"current",sidebarPosition:0,frontMatter:{sidebar_position:0},sidebar:"docsSidebar",previous:{title:"LazyProperty",permalink:"/ExtendedCS/docs/capabilities/lazy-property"},next:{title:"Use Case: Dependency Injection",permalink:"/ExtendedCS/docs/capabilities/implicits/dependency-injection"}},o={},c=[{value:"Implicit",id:"implicit",level:2},{value:"Implicit Resolution Process",id:"implicit-resolution-process",level:3},{value:"Implicit Derivation",id:"implicit-derivation",level:3},{value:"Implicit Hinting",id:"implicit-hinting",level:3},{value:"ImplicitPassThrough",id:"implicitpassthrough",level:2}],m={toc:c},s="wrapper";function u(e){let{components:t,...a}=e;return(0,r.kt)(s,(0,n.Z)({},m,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"implicits"},"Implicits"),(0,r.kt)("p",null,"Implicits are a feature that we have ported from the ",(0,r.kt)("a",{parentName:"p",href:"https://scala-lang.org"},"Scala language"),". They are a way to resolve function parameter values without providing them explicitly."),(0,r.kt)("p",null,"We currently have two ways to use implicits: ",(0,r.kt)("inlineCode",{parentName:"p"},"[Implicit]")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"[ImplicitPassThrough]"),"."),(0,r.kt)("h2",{id:"implicit"},"Implicit"),(0,r.kt)("p",null,"You can mark parameters to functions as implicits:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cs"},"using GenerationAttributes;\n\npublic static A Sum<A>(\n  this IEnumerable<A> elements, [Implicit] Numeric<A> numeric = default\n) =>\n  elements.Aggregate(numeric.Zero, (a, b) => numeric.Add(a, b));\n")),(0,r.kt)("p",null,"When you invoke this function, you can either:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Provide the argument explicitly, then it will behave as a regular function."),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-cs"},"var sum = new []{1, 2, 3}.Sum(Numeric.Integer);\n"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Or omit the parameter, in which case the compiler will perform an implicit search to provide a value for the parameter at a compile time."),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-cs"},"var sum = new []{1, 2, 3}.Sum();\n")))),(0,r.kt)("h3",{id:"implicit-resolution-process"},"Implicit Resolution Process"),(0,r.kt)("p",null,"The compiler tries to find a value for the implicit parameter using these rules:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"It has to find ",(0,r.kt)("strong",{parentName:"p"},"exactly one")," value of the required type. Finding zero or more than one values is a compile time error.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"The compiler first looks for any parameters marked as ",(0,r.kt)("inlineCode",{parentName:"p"},"[Implicit]")," in the local function."),(0,r.kt)("p",{parentName:"li"},"For example:"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-cs"},"public int SumIntegers(int[] integers, [Implicit] Numeric<int> numeric = default) =>\n  integers.Sum();\n")),(0,r.kt)("p",{parentName:"li"},"Will compile to:"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-cs"},"public int SumIntegers(int[] integers, [Implicit] Numeric<int> numeric = default) =>\n  integers.Sum(numeric);\n"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"If the compiler can not find a suitable value in the local scope, it tries the class / struct scope."),(0,r.kt)("p",{parentName:"li"},"For example:"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-cs"},"class NumberCruncher {\n  // This can also be static.\n  readonly [Implicit] Numeric<int> IntNumeric = /* ... */;\n\n  public int SumIntegers(int[] integers) => integers.Sum();\n}\n")),(0,r.kt)("p",{parentName:"li"},"Will compile to:"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-cs"},"class NumberCruncher {\n  readonly [Implicit] Numeric<int> IntNumeric = /* ... */;\n\n  public int SumIntegers(int[] integers) => integers.Sum(IntNumeric);\n}\n"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"If class / struct scope fails as well, it tries to find a ",(0,r.kt)("inlineCode",{parentName:"p"},"public static")," field, property or method to provide the value."),(0,r.kt)("p",{parentName:"li"},"For example:"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-cs"},"public static class Numerics {\n  [Implicit] public static readonly Numeric<int> IntNumeric = /* ... */;\n}\n\nclass NumberCruncher {\n  public int SumIntegers(int[] integers) => integers.Sum();\n}\n")),(0,r.kt)("p",{parentName:"li"},"Will compile to:"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-cs"},"public static class Numerics {\n  [Implicit] public static readonly Numeric<int> IntNumeric = /* ... */;\n}\n\nclass NumberCruncher {\n  public int SumIntegers(int[] integers) => integers.Sum(Numerics.IntNumeric);\n}\n"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"If it can not find a value, a compilation error is emitted:"),(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"Example.cs(24, 16): [Implicits02] No matching implicits found for parameter 'numeric' of type 'Numeric<int>' on operation 'SumIntegers'")))),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"The resolution always follows the ",(0,r.kt)("inlineCode",{parentName:"p"},"function"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"class / struct"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"global")," order."),(0,r.kt)("p",{parentName:"admonition"},"The idea behind it is that the more local the scope is, the more relevant the implicit value is to your computation.")),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"Implicits have to rewrite your code, thus you will end up with a ",(0,r.kt)("inlineCode",{parentName:"p"},".transformed.cs")," file."),(0,r.kt)("p",{parentName:"admonition"},"See ",(0,r.kt)("a",{parentName:"p",href:"/ExtendedCS/docs/generation-and-transformation/"},"code transformation")," for more information.")),(0,r.kt)("h3",{id:"implicit-derivation"},"Implicit Derivation"),(0,r.kt)("p",null,"TODO"),(0,r.kt)("h3",{id:"implicit-hinting"},"Implicit Hinting"),(0,r.kt)("p",null,"If you are using an IDE that supports compiler hints, the IDE will show you a hint with the information of how the implicit was resolved without the need of recompile."),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"Resolved implicit",src:i(409).Z,width:"940",height:"343"})),(0,r.kt)("h2",{id:"implicitpassthrough"},"ImplicitPassThrough"),(0,r.kt)("p",null,"TODO"))}u.isMDXComponent=!0},409:(e,t,i)=>{i.d(t,{Z:()=>n});const n=i.p+"assets/images/resolved-implicit-ad80bfac04970cbbc79c40ec06b5f1d3.png"}}]);