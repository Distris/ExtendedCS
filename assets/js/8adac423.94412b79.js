"use strict";(self.webpackChunkcsharp_extended_compiler=self.webpackChunkcsharp_extended_compiler||[]).push([[7682],{3905:(e,n,t)=>{t.d(n,{Zo:()=>u,kt:()=>f});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var c=r.createContext({}),l=function(e){var n=r.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},u=function(e){var n=l(e.components);return r.createElement(c.Provider,{value:n},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},m=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,i=e.originalType,c=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),p=l(t),m=a,f=p["".concat(c,".").concat(m)]||p[m]||d[m]||i;return t?r.createElement(f,o(o({ref:n},u),{},{components:t})):r.createElement(f,o({ref:n},u))}));function f(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=t.length,o=new Array(i);o[0]=m;var s={};for(var c in n)hasOwnProperty.call(n,c)&&(s[c]=n[c]);s.originalType=e,s[p]="string"==typeof e?e:a,o[1]=s;for(var l=2;l<i;l++)o[l]=t[l];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}m.displayName="MDXCreateElement"},1281:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>d,frontMatter:()=>i,metadata:()=>s,toc:()=>l});var r=t(7462),a=(t(7294),t(3905));const i={sidebar_position:5},o="Use Cases",s={unversionedId:"macros/attribute-based/use-cases",id:"macros/attribute-based/use-cases",title:"Use Cases",description:"Expression and statement macros are incredibly useful in these scenarios.",source:"@site/docs/macros/attribute-based/use-cases.md",sourceDirName:"macros/attribute-based",slug:"/macros/attribute-based/use-cases",permalink:"/ExtendedCS/docs/macros/attribute-based/use-cases",draft:!1,editUrl:"https://github.com/distris/ExtendedCS/tree/main/docs/macros/attribute-based/use-cases.md",tags:[],version:"current",sidebarPosition:5,frontMatter:{sidebar_position:5},sidebar:"docsSidebar",previous:{title:"Parameters and Functions",permalink:"/ExtendedCS/docs/macros/attribute-based/parameters-and-functions"},next:{title:"Scriban-Based Macros",permalink:"/ExtendedCS/docs/macros/scriban-based/"}},c={},l=[{value:"Reducing boilerplate",id:"reducing-boilerplate",level:2},{value:"Giving new language capabilities to C#",id:"giving-new-language-capabilities-to-c",level:2},{value:"Providing great developer experience while retaining performance of imperative code",id:"providing-great-developer-experience-while-retaining-performance-of-imperative-code",level:2},{value:"Inlining performance-sensitive code with <code>inline</code>",id:"inlining-performance-sensitive-code-with-inline",level:2}],u={toc:l},p="wrapper";function d(e){let{components:n,...t}=e;return(0,a.kt)(p,(0,r.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"use-cases"},"Use Cases"),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"/ExtendedCS/docs/macros/attribute-based/expression-macro"},"Expression")," and ",(0,a.kt)("a",{parentName:"p",href:"/ExtendedCS/docs/macros/attribute-based/statement-macro"},"statement")," macros are incredibly useful in these scenarios."),(0,a.kt)("h2",{id:"reducing-boilerplate"},"Reducing boilerplate"),(0,a.kt)("p",null,"Frequently used pieces of code can be encoded as macro functions."),(0,a.kt)("p",null,"Some examples:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cs"},'/// <summary>\n/// Allows you to write `Ref.refMacro(RenderTexture.active)` instead of\n/// `Ref.a(() => RenderTexture.active, v => RenderTexture.active = v)`.\n/// </summary>\n[ExpressionMacro("Ref.a(() => ${a}, v => ${a} = v)")]\npublic static Ref<A> refMacro<A>(A a) => \n  throw new MacroException();\n\n/// <summary>\n/// Uses a macro to capture an address of the given parameter.\n/// <para/>\n/// Equivalent to <![CDATA[ `PtrOf.a(&value)` ]]>. \n/// </summary>\n[ExpressionMacro(@"PtrOf.a(&${a})")]\npublic static PtrOf<A> toPtrOf<A>(this A a) where A : unmanaged => \n  throw new MacroException();\n\n/// <summary>\n/// Returns <see cref="ArgumentOutOfRangeException"/> that references a given value.\n/// </summary>\n/// <example><code><![CDATA[\n/// var type = stringValue switch {\n///   "Steve" => ..., \n///   "Bob" => ..., \n///   _ => throw stringValue.argumentOutOfRange()\n/// };\n/// ]]></code></example>\n[ExpressionMacro(\n  @"new System.ArgumentOutOfRangeException(""${a}"", ${a}, ""unknown value"")"\n)]\npublic static ArgumentOutOfRangeException argumentOutOfRange<A>(this A a) => \n  throw new MacroException();\n')),(0,a.kt)("h2",{id:"giving-new-language-capabilities-to-c"},"Giving new language capabilities to C#"),(0,a.kt)("p",null,"For example, C# does not support extension methods on pointers, however we can do this:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cs"},'struct Inventory { \n  // This requires a pointer.\n  public static WeaponStatePtr inHandsInner(Inventory* inventory) {\n    ...\n  }\n\n  /// <summary>\n  /// This function only works if <see cref="Inventory"/> is a pointer.\n  /// </summary>\n  [ExpressionMacro(@"Inventory." + nameof(inHandsInner) + "(&${this})")]\n  public WeaponStatePtr inHandsPtr() => \n    throw new MacroException();\n}\n')),(0,a.kt)("p",null,"And then you can invoke it:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cs"},"var weaponStatePtr = c->CharacterEF->inventory.inHandsPtr()\n")),(0,a.kt)("h2",{id:"providing-great-developer-experience-while-retaining-performance-of-imperative-code"},"Providing great developer experience while retaining performance of imperative code"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"inline")," allows us to have nice anonymous-function based APIs which are then compiled down to imperative code and the cost of closure allocation and virtual delegate dispatch are eliminated."),(0,a.kt)("h2",{id:"inlining-performance-sensitive-code-with-inline"},"Inlining performance-sensitive code with ",(0,a.kt)("inlineCode",{parentName:"h2"},"inline")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cs"},'/// <summary>\n/// Code copied from <see cref="FrameBase.TryFindAsset{T}(Quantum.AssetGuid,out T)"/>, \n/// inlined with a macro for maximum performance. Note that <see cref="id"/> must be \n/// an already resolved value, as it is inlined.\n/// </summary>\n/// <returns>Will return `null` if the asset is not found.</returns>\n[ExpressionMacro(\n  @"({{ id }}.IsDynamic \n    ? _dynamicAssetDB.FindAsset({{ id }}) \n    : Context.AssetDB.FindAsset({{ id }}, mainThread: true))"\n)]\nstatic AssetObject findOrNull(AssetGuid id) => \n  throw new MacroException();\n')))}d.isMDXComponent=!0}}]);