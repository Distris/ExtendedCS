"use strict";(self.webpackChunkcsharp_extended_compiler=self.webpackChunkcsharp_extended_compiler||[]).push([[2993],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>b});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var c=a.createContext({}),l=function(e){var t=a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=l(e.components);return a.createElement(c.Provider,{value:t},e.children)},m="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,c=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),m=l(n),d=r,b=m["".concat(c,".").concat(d)]||m[d]||u[d]||o;return n?a.createElement(b,i(i({ref:t},p),{},{components:n})):a.createElement(b,i({ref:t},p))}));function b(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=d;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s[m]="string"==typeof e?e:r,i[1]=s;for(var l=2;l<o;l++)i[l]=n[l];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},4796:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>u,frontMatter:()=>o,metadata:()=>s,toc:()=>l});var a=n(7462),r=(n(7294),n(3905));const o={sidebar_position:3},i="StatementMacro",s={unversionedId:"macros/attribute-based/statement-macro",id:"macros/attribute-based/statement-macro",title:"StatementMacro",description:"StatementMacro] is very similar to [[ExpressionMacro], however where [ExpressionMacro] produces expressions, [StatementMacro] produces statements.",source:"@site/docs/macros/attribute-based/statement-macro.md",sourceDirName:"macros/attribute-based",slug:"/macros/attribute-based/statement-macro",permalink:"/docs/macros/attribute-based/statement-macro",draft:!1,editUrl:"https://github.com/distris/ExtendedCS/tree/main/docs/macros/attribute-based/statement-macro.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"docsSidebar",previous:{title:"ExpressionMacro",permalink:"/docs/macros/attribute-based/expression-macro"},next:{title:"TODO: VarMacro",permalink:"/docs/macros/attribute-based/var-macro"}},c={},l=[{value:"Syntax",id:"syntax",level:2}],p={toc:l},m="wrapper";function u(e){let{components:t,...n}=e;return(0,r.kt)(m,(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"statementmacro"},"StatementMacro"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"[StatementMacro]")," is very similar to ",(0,r.kt)("a",{parentName:"p",href:"/docs/macros/attribute-based/expression-macro"},(0,r.kt)("inlineCode",{parentName:"a"},"[ExpressionMacro]")),", however where ",(0,r.kt)("inlineCode",{parentName:"p"},"[ExpressionMacro]")," produces expressions, ",(0,r.kt)("inlineCode",{parentName:"p"},"[StatementMacro]")," produces statements."),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"An expression is anything that can be assigned to a variable, while a statement is a free-standing piece of code that cannot be assigned to a variable."),(0,r.kt)("p",{parentName:"admonition"},"Examples of statements include ",(0,r.kt)("inlineCode",{parentName:"p"},"return"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"while"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"if / else")," or calling functions that return ",(0,r.kt)("inlineCode",{parentName:"p"},"void")," (such as ",(0,r.kt)("inlineCode",{parentName:"p"},"Console.WriteLine(string s)"),").")),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"This only supports bodies that are statements. If you need to have expression bodies, use ",(0,r.kt)("a",{parentName:"p",href:"/docs/macros/attribute-based/expression-macro"},(0,r.kt)("inlineCode",{parentName:"a"},"[ExpressionMacro]"))," instead.")),(0,r.kt)("p",null,"For example, if we define such macro function:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cs"},"using GenerationAttributes;\n\npublic static class NullableExts {\n  [StatementMacro(@\"\nvar {{ uniqueId }} = {{ opt }};\nif (({{ uniqueId }}).HasValue) {\n  {{ inline 'ifSome' uniqueId + '.Value' }};\n} else {\n  {{ inline 'ifNone' }};\n}\n\")]\n  public static void voidFoldM<A>(\n    this A? opt, Action ifNone, Action<A> ifSome\n  ) => \n    throw new MacroException();\n}\n")),(0,r.kt)("p",null,"Then this code:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cs"},'void run(int? maybeValue) {\n  maybeValue.voidFoldM(\n    ifNone: () => {\n      Console.WriteLine("No value.")\n    }, \n    ifSome: value => {\n      Console.WriteLine($"Received value: {value}");\n    }\n  );\n}\n')),(0,r.kt)("p",null,"Will be compiled to:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cs"},'void run(int? maybeValue) {\n  var id_542_671 = maybeValue;\n  if ((id_542_671).HasValue) {\n    _LOCAL_ifSome_601_670(id_542_671.Value);\n  }\n  else {\n    Console.WriteLine("No value.");\n  }\n\n  void _LOCAL_ifSome_601_670(int value) {\n    Console.WriteLine($"Received value: {value}");\n  }\n}\n')),(0,r.kt)("h2",{id:"syntax"},"Syntax"),(0,r.kt)("p",null,"The pattern for ",(0,r.kt)("inlineCode",{parentName:"p"},"StatementMacro")," is evaluated with ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/scriban/scriban"},"scriban")," templating language."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cs"},'[StatementMacro("scriban goes here")]\n')),(0,r.kt)("p",null,"See ",(0,r.kt)("a",{parentName:"p",href:"/docs/macros/attribute-based/parameters-and-functions"},"parameters and functions")," for additional information."))}u.isMDXComponent=!0}}]);